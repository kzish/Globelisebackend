    Checking common-utils v0.1.0 (/home/hbina/globelise/globelise-backend/common-utils)
error[E0433]: failed to resolve: could not find `headers` in `axum`
 --> common-utils/src/token.rs:8:5
  |
8 |     headers::{authorization::Bearer, Authorization},
  |     ^^^^^^^ could not find `headers` in `axum`
error[E0432]: unresolved imports `axum::extract::TypedHeader`, `axum::headers`
 --> common-utils/src/token.rs:7:60
  |
7 |     extract::{Extension, FromRequest, Query, RequestParts, TypedHeader},
  |                                                            ^^^^^^^^^^^ no `TypedHeader` in `extract`
8 |     headers::{authorization::Bearer, Authorization},
  |     ^^^^^^^ could not find `headers` in `axum`
Some errors have detailed explanations: E0432, E0433.
For more information about an error, try `rustc --explain E0432`.

#![feature(prelude_import)]
//! Functions and types for handling authorization tokens.
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use error::GlobeliseResult;
use serde::{Deserialize, Serialize};
use strum::Display;
pub mod custom_serde {
    use crate::error::GlobeliseError;
    use email_address::EmailAddress;
    use serde::{Deserialize, Serialize};
    pub struct DateWrapper(String);
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for DateWrapper {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                DateWrapper(ref __self_0_0) => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_tuple(f, "DateWrapper");
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_0_0));
                    ::core::fmt::DebugTuple::finish(debug_trait_builder)
                }
            }
        }
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for DateWrapper {
            fn deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<DateWrapper>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = DateWrapper;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "tuple struct DateWrapper",
                        )
                    }
                    #[inline]
                    fn visit_newtype_struct<__E>(
                        self,
                        __e: __E,
                    ) -> _serde::__private::Result<Self::Value, __E::Error>
                    where
                        __E: _serde::Deserializer<'de>,
                    {
                        let __field0: String =
                            match <String as _serde::Deserialize>::deserialize(__e) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            };
                        _serde::__private::Ok(DateWrapper(__field0))
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"tuple struct DateWrapper with 1 element",
                                        ),
                                    );
                                }
                            };
                        _serde::__private::Ok(DateWrapper(__field0))
                    }
                }
                _serde::Deserializer::deserialize_newtype_struct(
                    __deserializer,
                    "DateWrapper",
                    __Visitor {
                        marker: _serde::__private::PhantomData::<DateWrapper>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for DateWrapper {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                _serde::Serializer::serialize_newtype_struct(__serializer, "DateWrapper", &self.0)
            }
        }
    };
    impl TryFrom<DateWrapper> for sqlx::types::time::Date {
        type Error = GlobeliseError;
        fn try_from(date: DateWrapper) -> Result<Self, Self::Error> {
            sqlx::types::time::Date::parse(date.0, "%F").map_err(GlobeliseError::bad_request)
        }
    }
    impl From<sqlx::types::time::Date> for DateWrapper {
        fn from(date: sqlx::types::time::Date) -> Self {
            Self(date.format("%F"))
        }
    }
    pub struct OffsetDateWrapper(String);
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for OffsetDateWrapper {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                OffsetDateWrapper(ref __self_0_0) => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_tuple(f, "OffsetDateWrapper");
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_0_0));
                    ::core::fmt::DebugTuple::finish(debug_trait_builder)
                }
            }
        }
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for OffsetDateWrapper {
            fn deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<OffsetDateWrapper>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = OffsetDateWrapper;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "tuple struct OffsetDateWrapper",
                        )
                    }
                    #[inline]
                    fn visit_newtype_struct<__E>(
                        self,
                        __e: __E,
                    ) -> _serde::__private::Result<Self::Value, __E::Error>
                    where
                        __E: _serde::Deserializer<'de>,
                    {
                        let __field0: String =
                            match <String as _serde::Deserialize>::deserialize(__e) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            };
                        _serde::__private::Ok(OffsetDateWrapper(__field0))
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"tuple struct OffsetDateWrapper with 1 element",
                                        ),
                                    );
                                }
                            };
                        _serde::__private::Ok(OffsetDateWrapper(__field0))
                    }
                }
                _serde::Deserializer::deserialize_newtype_struct(
                    __deserializer,
                    "OffsetDateWrapper",
                    __Visitor {
                        marker: _serde::__private::PhantomData::<OffsetDateWrapper>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for OffsetDateWrapper {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                _serde::Serializer::serialize_newtype_struct(
                    __serializer,
                    "OffsetDateWrapper",
                    &self.0,
                )
            }
        }
    };
    impl TryFrom<OffsetDateWrapper> for sqlx::types::time::OffsetDateTime {
        type Error = GlobeliseError;
        fn try_from(date: OffsetDateWrapper) -> Result<Self, Self::Error> {
            sqlx::types::time::OffsetDateTime::parse(date.0, time::Format::Rfc3339)
                .map_err(GlobeliseError::bad_request)
        }
    }
    impl From<sqlx::types::time::OffsetDateTime> for OffsetDateWrapper {
        fn from(date: sqlx::types::time::OffsetDateTime) -> Self {
            Self(date.format(time::Format::Rfc3339))
        }
    }
    pub struct OptionDateWrapper(Option<String>);
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for OptionDateWrapper {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                OptionDateWrapper(ref __self_0_0) => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_tuple(f, "OptionDateWrapper");
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_0_0));
                    ::core::fmt::DebugTuple::finish(debug_trait_builder)
                }
            }
        }
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for OptionDateWrapper {
            fn deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<OptionDateWrapper>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = OptionDateWrapper;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "tuple struct OptionDateWrapper",
                        )
                    }
                    #[inline]
                    fn visit_newtype_struct<__E>(
                        self,
                        __e: __E,
                    ) -> _serde::__private::Result<Self::Value, __E::Error>
                    where
                        __E: _serde::Deserializer<'de>,
                    {
                        let __field0: Option<String> =
                            match <Option<String> as _serde::Deserialize>::deserialize(__e) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            };
                        _serde::__private::Ok(OptionDateWrapper(__field0))
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            Option<String>,
                        >(&mut __seq)
                        {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(_serde::de::Error::invalid_length(
                                    0usize,
                                    &"tuple struct OptionDateWrapper with 1 element",
                                ));
                            }
                        };
                        _serde::__private::Ok(OptionDateWrapper(__field0))
                    }
                }
                _serde::Deserializer::deserialize_newtype_struct(
                    __deserializer,
                    "OptionDateWrapper",
                    __Visitor {
                        marker: _serde::__private::PhantomData::<OptionDateWrapper>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for OptionDateWrapper {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                _serde::Serializer::serialize_newtype_struct(
                    __serializer,
                    "OptionDateWrapper",
                    &self.0,
                )
            }
        }
    };
    impl TryFrom<OptionDateWrapper> for Option<sqlx::types::time::OffsetDateTime> {
        type Error = GlobeliseError;
        fn try_from(date: OptionDateWrapper) -> Result<Self, Self::Error> {
            date.0
                .map(|v| {
                    sqlx::types::time::OffsetDateTime::parse(v, "%F")
                        .map_err(GlobeliseError::bad_request)
                })
                .transpose()
        }
    }
    impl From<Option<sqlx::types::time::OffsetDateTime>> for OptionDateWrapper {
        fn from(date: Option<sqlx::types::time::OffsetDateTime>) -> Self {
            Self(date.map(|d| d.format("%F")))
        }
    }
    pub struct EmailWrapper(String);
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for EmailWrapper {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                EmailWrapper(ref __self_0_0) => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_tuple(f, "EmailWrapper");
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_0_0));
                    ::core::fmt::DebugTuple::finish(debug_trait_builder)
                }
            }
        }
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for EmailWrapper {
            fn deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<EmailWrapper>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = EmailWrapper;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "tuple struct EmailWrapper",
                        )
                    }
                    #[inline]
                    fn visit_newtype_struct<__E>(
                        self,
                        __e: __E,
                    ) -> _serde::__private::Result<Self::Value, __E::Error>
                    where
                        __E: _serde::Deserializer<'de>,
                    {
                        let __field0: String =
                            match <String as _serde::Deserialize>::deserialize(__e) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            };
                        _serde::__private::Ok(EmailWrapper(__field0))
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"tuple struct EmailWrapper with 1 element",
                                        ),
                                    );
                                }
                            };
                        _serde::__private::Ok(EmailWrapper(__field0))
                    }
                }
                _serde::Deserializer::deserialize_newtype_struct(
                    __deserializer,
                    "EmailWrapper",
                    __Visitor {
                        marker: _serde::__private::PhantomData::<EmailWrapper>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for EmailWrapper {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                _serde::Serializer::serialize_newtype_struct(__serializer, "EmailWrapper", &self.0)
            }
        }
    };
    impl TryFrom<EmailWrapper> for EmailAddress {
        type Error = GlobeliseError;
        fn try_from(email: EmailWrapper) -> Result<Self, Self::Error> {
            email
                .0
                .parse::<EmailAddress>()
                .map_err(GlobeliseError::bad_request)
        }
    }
    impl From<EmailAddress> for EmailWrapper {
        fn from(email: EmailAddress) -> Self {
            EmailWrapper(email.to_string())
        }
    }
    pub struct ImageData(pub Vec<u8>);
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for ImageData {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                ImageData(ref __self_0_0) => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_tuple(f, "ImageData");
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_0_0));
                    ::core::fmt::DebugTuple::finish(debug_trait_builder)
                }
            }
        }
    }
    impl AsRef<[u8]> for ImageData {
        fn as_ref(&self) -> &[u8] {
            &self.0
        }
    }
    impl TryFrom<Vec<u8>> for ImageData {
        type Error = GlobeliseError;
        fn try_from(image_data: Vec<u8>) -> Result<Self, Self::Error> {
            match image::guess_format(&image_data).map_err(GlobeliseError::internal)? {
                image::ImageFormat::Png | image::ImageFormat::Jpeg => (),
                _ => return Err(GlobeliseError::UnsupportedImageFormat),
            }
            let image = image::load_from_memory(&image_data).map_err(GlobeliseError::internal)?;
            let (width, height) = image::GenericImageView::dimensions(&image);
            if width > IMAGE_DIMENSION_LIMIT || height > IMAGE_DIMENSION_LIMIT {
                return Err(GlobeliseError::payload_too_large({
                    let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1_formatted(
                        &["Image dimensions cannot exceed ", " x "],
                        &[::core::fmt::ArgumentV1::new_display(&IMAGE_DIMENSION_LIMIT)],
                        &[
                            ::core::fmt::rt::v1::Argument {
                                position: 0usize,
                                format: ::core::fmt::rt::v1::FormatSpec {
                                    fill: ' ',
                                    align: ::core::fmt::rt::v1::Alignment::Unknown,
                                    flags: 0u32,
                                    precision: ::core::fmt::rt::v1::Count::Implied,
                                    width: ::core::fmt::rt::v1::Count::Implied,
                                },
                            },
                            ::core::fmt::rt::v1::Argument {
                                position: 0usize,
                                format: ::core::fmt::rt::v1::FormatSpec {
                                    fill: ' ',
                                    align: ::core::fmt::rt::v1::Alignment::Unknown,
                                    flags: 0u32,
                                    precision: ::core::fmt::rt::v1::Count::Implied,
                                    width: ::core::fmt::rt::v1::Count::Implied,
                                },
                            },
                        ],
                        unsafe { ::core::fmt::UnsafeArg::new() },
                    ));
                    res
                }));
            }
            Ok(Self(image_data))
        }
    }
    #[sqlx(type_name = "currency")]
    #[allow(clippy::upper_case_acronyms)]
    pub enum Currency {
        AED,
        AFN,
        ALL,
        AMD,
        ANG,
        AOA,
        ARS,
        AUD,
        AWG,
        AZN,
        BAM,
        BBD,
        BDT,
        BGN,
        BHD,
        BIF,
        BMD,
        BND,
        BOB,
        BOV,
        BRL,
        BSD,
        BTN,
        BWP,
        BYN,
        BZD,
        CAD,
        CDF,
        CHE,
        CHF,
        CHW,
        CLF,
        CLP,
        CNY,
        COP,
        COU,
        CRC,
        CUC,
        CUP,
        CVE,
        CZK,
        DJF,
        DKK,
        DOP,
        DZD,
        EGP,
        ERN,
        ETB,
        EUR,
        FJD,
        FKP,
        GBP,
        GEL,
        GHS,
        GIP,
        GMD,
        GNF,
        GTQ,
        GYD,
        HKD,
        HNL,
        HRK,
        HTG,
        HUF,
        IDR,
        ILS,
        INR,
        IQD,
        IRR,
        ISK,
        JMD,
        JOD,
        JPY,
        KES,
        KGS,
        KHR,
        KMF,
        KPW,
        KRW,
        KWD,
        KYD,
        KZT,
        LAK,
        LBP,
        LKR,
        LRD,
        LSL,
        LYD,
        MAD,
        MDL,
        MGA,
        MKD,
        MMK,
        MNT,
        MOP,
        MRU,
        MUR,
        MVR,
        MWK,
        MXN,
        MXV,
        MYR,
        MZN,
        NAD,
        NGN,
        NIO,
        NOK,
        NPR,
        NZD,
        OMR,
        PAB,
        PEN,
        PGK,
        PHP,
        PKR,
        PLN,
        PYG,
        QAR,
        RON,
        RSD,
        RUB,
        RWF,
        SAR,
        SBD,
        SCR,
        SDG,
        SEK,
        SGD,
        SHP,
        SLL,
        SOS,
        SRD,
        SSP,
        STN,
        SVC,
        SYP,
        SZL,
        THB,
        TJS,
        TMT,
        TND,
        TOP,
        TRY,
        TTD,
        TWD,
        TZS,
        UAH,
        UGX,
        USD,
        USN,
        UYI,
        UYU,
        UYW,
        UZS,
        VED,
        VES,
        VND,
        VUV,
        WST,
        XAF,
        XAG,
        XAU,
        XBA,
        XBB,
        XBC,
        XBD,
        XCD,
        XDR,
        XOF,
        XPD,
        XPF,
        XPT,
        XSU,
        XTS,
        XUA,
        XXX,
        YER,
        ZAR,
        ZMW,
        ZWL,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    #[allow(clippy::upper_case_acronyms)]
    impl ::core::clone::Clone for Currency {
        #[inline]
        fn clone(&self) -> Currency {
            {
                *self
            }
        }
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    #[allow(clippy::upper_case_acronyms)]
    impl ::core::marker::Copy for Currency {}
    #[automatically_derived]
    #[allow(unused_qualifications)]
    #[allow(clippy::upper_case_acronyms)]
    impl ::core::fmt::Debug for Currency {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match (&*self,) {
                (&Currency::AED,) => ::core::fmt::Formatter::write_str(f, "AED"),
                (&Currency::AFN,) => ::core::fmt::Formatter::write_str(f, "AFN"),
                (&Currency::ALL,) => ::core::fmt::Formatter::write_str(f, "ALL"),
                (&Currency::AMD,) => ::core::fmt::Formatter::write_str(f, "AMD"),
                (&Currency::ANG,) => ::core::fmt::Formatter::write_str(f, "ANG"),
                (&Currency::AOA,) => ::core::fmt::Formatter::write_str(f, "AOA"),
                (&Currency::ARS,) => ::core::fmt::Formatter::write_str(f, "ARS"),
                (&Currency::AUD,) => ::core::fmt::Formatter::write_str(f, "AUD"),
                (&Currency::AWG,) => ::core::fmt::Formatter::write_str(f, "AWG"),
                (&Currency::AZN,) => ::core::fmt::Formatter::write_str(f, "AZN"),
                (&Currency::BAM,) => ::core::fmt::Formatter::write_str(f, "BAM"),
                (&Currency::BBD,) => ::core::fmt::Formatter::write_str(f, "BBD"),
                (&Currency::BDT,) => ::core::fmt::Formatter::write_str(f, "BDT"),
                (&Currency::BGN,) => ::core::fmt::Formatter::write_str(f, "BGN"),
                (&Currency::BHD,) => ::core::fmt::Formatter::write_str(f, "BHD"),
                (&Currency::BIF,) => ::core::fmt::Formatter::write_str(f, "BIF"),
                (&Currency::BMD,) => ::core::fmt::Formatter::write_str(f, "BMD"),
                (&Currency::BND,) => ::core::fmt::Formatter::write_str(f, "BND"),
                (&Currency::BOB,) => ::core::fmt::Formatter::write_str(f, "BOB"),
                (&Currency::BOV,) => ::core::fmt::Formatter::write_str(f, "BOV"),
                (&Currency::BRL,) => ::core::fmt::Formatter::write_str(f, "BRL"),
                (&Currency::BSD,) => ::core::fmt::Formatter::write_str(f, "BSD"),
                (&Currency::BTN,) => ::core::fmt::Formatter::write_str(f, "BTN"),
                (&Currency::BWP,) => ::core::fmt::Formatter::write_str(f, "BWP"),
                (&Currency::BYN,) => ::core::fmt::Formatter::write_str(f, "BYN"),
                (&Currency::BZD,) => ::core::fmt::Formatter::write_str(f, "BZD"),
                (&Currency::CAD,) => ::core::fmt::Formatter::write_str(f, "CAD"),
                (&Currency::CDF,) => ::core::fmt::Formatter::write_str(f, "CDF"),
                (&Currency::CHE,) => ::core::fmt::Formatter::write_str(f, "CHE"),
                (&Currency::CHF,) => ::core::fmt::Formatter::write_str(f, "CHF"),
                (&Currency::CHW,) => ::core::fmt::Formatter::write_str(f, "CHW"),
                (&Currency::CLF,) => ::core::fmt::Formatter::write_str(f, "CLF"),
                (&Currency::CLP,) => ::core::fmt::Formatter::write_str(f, "CLP"),
                (&Currency::CNY,) => ::core::fmt::Formatter::write_str(f, "CNY"),
                (&Currency::COP,) => ::core::fmt::Formatter::write_str(f, "COP"),
                (&Currency::COU,) => ::core::fmt::Formatter::write_str(f, "COU"),
                (&Currency::CRC,) => ::core::fmt::Formatter::write_str(f, "CRC"),
                (&Currency::CUC,) => ::core::fmt::Formatter::write_str(f, "CUC"),
                (&Currency::CUP,) => ::core::fmt::Formatter::write_str(f, "CUP"),
                (&Currency::CVE,) => ::core::fmt::Formatter::write_str(f, "CVE"),
                (&Currency::CZK,) => ::core::fmt::Formatter::write_str(f, "CZK"),
                (&Currency::DJF,) => ::core::fmt::Formatter::write_str(f, "DJF"),
                (&Currency::DKK,) => ::core::fmt::Formatter::write_str(f, "DKK"),
                (&Currency::DOP,) => ::core::fmt::Formatter::write_str(f, "DOP"),
                (&Currency::DZD,) => ::core::fmt::Formatter::write_str(f, "DZD"),
                (&Currency::EGP,) => ::core::fmt::Formatter::write_str(f, "EGP"),
                (&Currency::ERN,) => ::core::fmt::Formatter::write_str(f, "ERN"),
                (&Currency::ETB,) => ::core::fmt::Formatter::write_str(f, "ETB"),
                (&Currency::EUR,) => ::core::fmt::Formatter::write_str(f, "EUR"),
                (&Currency::FJD,) => ::core::fmt::Formatter::write_str(f, "FJD"),
                (&Currency::FKP,) => ::core::fmt::Formatter::write_str(f, "FKP"),
                (&Currency::GBP,) => ::core::fmt::Formatter::write_str(f, "GBP"),
                (&Currency::GEL,) => ::core::fmt::Formatter::write_str(f, "GEL"),
                (&Currency::GHS,) => ::core::fmt::Formatter::write_str(f, "GHS"),
                (&Currency::GIP,) => ::core::fmt::Formatter::write_str(f, "GIP"),
                (&Currency::GMD,) => ::core::fmt::Formatter::write_str(f, "GMD"),
                (&Currency::GNF,) => ::core::fmt::Formatter::write_str(f, "GNF"),
                (&Currency::GTQ,) => ::core::fmt::Formatter::write_str(f, "GTQ"),
                (&Currency::GYD,) => ::core::fmt::Formatter::write_str(f, "GYD"),
                (&Currency::HKD,) => ::core::fmt::Formatter::write_str(f, "HKD"),
                (&Currency::HNL,) => ::core::fmt::Formatter::write_str(f, "HNL"),
                (&Currency::HRK,) => ::core::fmt::Formatter::write_str(f, "HRK"),
                (&Currency::HTG,) => ::core::fmt::Formatter::write_str(f, "HTG"),
                (&Currency::HUF,) => ::core::fmt::Formatter::write_str(f, "HUF"),
                (&Currency::IDR,) => ::core::fmt::Formatter::write_str(f, "IDR"),
                (&Currency::ILS,) => ::core::fmt::Formatter::write_str(f, "ILS"),
                (&Currency::INR,) => ::core::fmt::Formatter::write_str(f, "INR"),
                (&Currency::IQD,) => ::core::fmt::Formatter::write_str(f, "IQD"),
                (&Currency::IRR,) => ::core::fmt::Formatter::write_str(f, "IRR"),
                (&Currency::ISK,) => ::core::fmt::Formatter::write_str(f, "ISK"),
                (&Currency::JMD,) => ::core::fmt::Formatter::write_str(f, "JMD"),
                (&Currency::JOD,) => ::core::fmt::Formatter::write_str(f, "JOD"),
                (&Currency::JPY,) => ::core::fmt::Formatter::write_str(f, "JPY"),
                (&Currency::KES,) => ::core::fmt::Formatter::write_str(f, "KES"),
                (&Currency::KGS,) => ::core::fmt::Formatter::write_str(f, "KGS"),
                (&Currency::KHR,) => ::core::fmt::Formatter::write_str(f, "KHR"),
                (&Currency::KMF,) => ::core::fmt::Formatter::write_str(f, "KMF"),
                (&Currency::KPW,) => ::core::fmt::Formatter::write_str(f, "KPW"),
                (&Currency::KRW,) => ::core::fmt::Formatter::write_str(f, "KRW"),
                (&Currency::KWD,) => ::core::fmt::Formatter::write_str(f, "KWD"),
                (&Currency::KYD,) => ::core::fmt::Formatter::write_str(f, "KYD"),
                (&Currency::KZT,) => ::core::fmt::Formatter::write_str(f, "KZT"),
                (&Currency::LAK,) => ::core::fmt::Formatter::write_str(f, "LAK"),
                (&Currency::LBP,) => ::core::fmt::Formatter::write_str(f, "LBP"),
                (&Currency::LKR,) => ::core::fmt::Formatter::write_str(f, "LKR"),
                (&Currency::LRD,) => ::core::fmt::Formatter::write_str(f, "LRD"),
                (&Currency::LSL,) => ::core::fmt::Formatter::write_str(f, "LSL"),
                (&Currency::LYD,) => ::core::fmt::Formatter::write_str(f, "LYD"),
                (&Currency::MAD,) => ::core::fmt::Formatter::write_str(f, "MAD"),
                (&Currency::MDL,) => ::core::fmt::Formatter::write_str(f, "MDL"),
                (&Currency::MGA,) => ::core::fmt::Formatter::write_str(f, "MGA"),
                (&Currency::MKD,) => ::core::fmt::Formatter::write_str(f, "MKD"),
                (&Currency::MMK,) => ::core::fmt::Formatter::write_str(f, "MMK"),
                (&Currency::MNT,) => ::core::fmt::Formatter::write_str(f, "MNT"),
                (&Currency::MOP,) => ::core::fmt::Formatter::write_str(f, "MOP"),
                (&Currency::MRU,) => ::core::fmt::Formatter::write_str(f, "MRU"),
                (&Currency::MUR,) => ::core::fmt::Formatter::write_str(f, "MUR"),
                (&Currency::MVR,) => ::core::fmt::Formatter::write_str(f, "MVR"),
                (&Currency::MWK,) => ::core::fmt::Formatter::write_str(f, "MWK"),
                (&Currency::MXN,) => ::core::fmt::Formatter::write_str(f, "MXN"),
                (&Currency::MXV,) => ::core::fmt::Formatter::write_str(f, "MXV"),
                (&Currency::MYR,) => ::core::fmt::Formatter::write_str(f, "MYR"),
                (&Currency::MZN,) => ::core::fmt::Formatter::write_str(f, "MZN"),
                (&Currency::NAD,) => ::core::fmt::Formatter::write_str(f, "NAD"),
                (&Currency::NGN,) => ::core::fmt::Formatter::write_str(f, "NGN"),
                (&Currency::NIO,) => ::core::fmt::Formatter::write_str(f, "NIO"),
                (&Currency::NOK,) => ::core::fmt::Formatter::write_str(f, "NOK"),
                (&Currency::NPR,) => ::core::fmt::Formatter::write_str(f, "NPR"),
                (&Currency::NZD,) => ::core::fmt::Formatter::write_str(f, "NZD"),
                (&Currency::OMR,) => ::core::fmt::Formatter::write_str(f, "OMR"),
                (&Currency::PAB,) => ::core::fmt::Formatter::write_str(f, "PAB"),
                (&Currency::PEN,) => ::core::fmt::Formatter::write_str(f, "PEN"),
                (&Currency::PGK,) => ::core::fmt::Formatter::write_str(f, "PGK"),
                (&Currency::PHP,) => ::core::fmt::Formatter::write_str(f, "PHP"),
                (&Currency::PKR,) => ::core::fmt::Formatter::write_str(f, "PKR"),
                (&Currency::PLN,) => ::core::fmt::Formatter::write_str(f, "PLN"),
                (&Currency::PYG,) => ::core::fmt::Formatter::write_str(f, "PYG"),
                (&Currency::QAR,) => ::core::fmt::Formatter::write_str(f, "QAR"),
                (&Currency::RON,) => ::core::fmt::Formatter::write_str(f, "RON"),
                (&Currency::RSD,) => ::core::fmt::Formatter::write_str(f, "RSD"),
                (&Currency::RUB,) => ::core::fmt::Formatter::write_str(f, "RUB"),
                (&Currency::RWF,) => ::core::fmt::Formatter::write_str(f, "RWF"),
                (&Currency::SAR,) => ::core::fmt::Formatter::write_str(f, "SAR"),
                (&Currency::SBD,) => ::core::fmt::Formatter::write_str(f, "SBD"),
                (&Currency::SCR,) => ::core::fmt::Formatter::write_str(f, "SCR"),
                (&Currency::SDG,) => ::core::fmt::Formatter::write_str(f, "SDG"),
                (&Currency::SEK,) => ::core::fmt::Formatter::write_str(f, "SEK"),
                (&Currency::SGD,) => ::core::fmt::Formatter::write_str(f, "SGD"),
                (&Currency::SHP,) => ::core::fmt::Formatter::write_str(f, "SHP"),
                (&Currency::SLL,) => ::core::fmt::Formatter::write_str(f, "SLL"),
                (&Currency::SOS,) => ::core::fmt::Formatter::write_str(f, "SOS"),
                (&Currency::SRD,) => ::core::fmt::Formatter::write_str(f, "SRD"),
                (&Currency::SSP,) => ::core::fmt::Formatter::write_str(f, "SSP"),
                (&Currency::STN,) => ::core::fmt::Formatter::write_str(f, "STN"),
                (&Currency::SVC,) => ::core::fmt::Formatter::write_str(f, "SVC"),
                (&Currency::SYP,) => ::core::fmt::Formatter::write_str(f, "SYP"),
                (&Currency::SZL,) => ::core::fmt::Formatter::write_str(f, "SZL"),
                (&Currency::THB,) => ::core::fmt::Formatter::write_str(f, "THB"),
                (&Currency::TJS,) => ::core::fmt::Formatter::write_str(f, "TJS"),
                (&Currency::TMT,) => ::core::fmt::Formatter::write_str(f, "TMT"),
                (&Currency::TND,) => ::core::fmt::Formatter::write_str(f, "TND"),
                (&Currency::TOP,) => ::core::fmt::Formatter::write_str(f, "TOP"),
                (&Currency::TRY,) => ::core::fmt::Formatter::write_str(f, "TRY"),
                (&Currency::TTD,) => ::core::fmt::Formatter::write_str(f, "TTD"),
                (&Currency::TWD,) => ::core::fmt::Formatter::write_str(f, "TWD"),
                (&Currency::TZS,) => ::core::fmt::Formatter::write_str(f, "TZS"),
                (&Currency::UAH,) => ::core::fmt::Formatter::write_str(f, "UAH"),
                (&Currency::UGX,) => ::core::fmt::Formatter::write_str(f, "UGX"),
                (&Currency::USD,) => ::core::fmt::Formatter::write_str(f, "USD"),
                (&Currency::USN,) => ::core::fmt::Formatter::write_str(f, "USN"),
                (&Currency::UYI,) => ::core::fmt::Formatter::write_str(f, "UYI"),
                (&Currency::UYU,) => ::core::fmt::Formatter::write_str(f, "UYU"),
                (&Currency::UYW,) => ::core::fmt::Formatter::write_str(f, "UYW"),
                (&Currency::UZS,) => ::core::fmt::Formatter::write_str(f, "UZS"),
                (&Currency::VED,) => ::core::fmt::Formatter::write_str(f, "VED"),
                (&Currency::VES,) => ::core::fmt::Formatter::write_str(f, "VES"),
                (&Currency::VND,) => ::core::fmt::Formatter::write_str(f, "VND"),
                (&Currency::VUV,) => ::core::fmt::Formatter::write_str(f, "VUV"),
                (&Currency::WST,) => ::core::fmt::Formatter::write_str(f, "WST"),
                (&Currency::XAF,) => ::core::fmt::Formatter::write_str(f, "XAF"),
                (&Currency::XAG,) => ::core::fmt::Formatter::write_str(f, "XAG"),
                (&Currency::XAU,) => ::core::fmt::Formatter::write_str(f, "XAU"),
                (&Currency::XBA,) => ::core::fmt::Formatter::write_str(f, "XBA"),
                (&Currency::XBB,) => ::core::fmt::Formatter::write_str(f, "XBB"),
                (&Currency::XBC,) => ::core::fmt::Formatter::write_str(f, "XBC"),
                (&Currency::XBD,) => ::core::fmt::Formatter::write_str(f, "XBD"),
                (&Currency::XCD,) => ::core::fmt::Formatter::write_str(f, "XCD"),
                (&Currency::XDR,) => ::core::fmt::Formatter::write_str(f, "XDR"),
                (&Currency::XOF,) => ::core::fmt::Formatter::write_str(f, "XOF"),
                (&Currency::XPD,) => ::core::fmt::Formatter::write_str(f, "XPD"),
                (&Currency::XPF,) => ::core::fmt::Formatter::write_str(f, "XPF"),
                (&Currency::XPT,) => ::core::fmt::Formatter::write_str(f, "XPT"),
                (&Currency::XSU,) => ::core::fmt::Formatter::write_str(f, "XSU"),
                (&Currency::XTS,) => ::core::fmt::Formatter::write_str(f, "XTS"),
                (&Currency::XUA,) => ::core::fmt::Formatter::write_str(f, "XUA"),
                (&Currency::XXX,) => ::core::fmt::Formatter::write_str(f, "XXX"),
                (&Currency::YER,) => ::core::fmt::Formatter::write_str(f, "YER"),
                (&Currency::ZAR,) => ::core::fmt::Formatter::write_str(f, "ZAR"),
                (&Currency::ZMW,) => ::core::fmt::Formatter::write_str(f, "ZMW"),
                (&Currency::ZWL,) => ::core::fmt::Formatter::write_str(f, "ZWL"),
            }
        }
    }
    #[automatically_derived]
    impl<'q, DB: ::sqlx::Database> ::sqlx::encode::Encode<'q, DB> for Currency
    where
        &'q ::std::primitive::str: ::sqlx::encode::Encode<'q, DB>,
    {
        fn encode_by_ref(
            &self,
            buf: &mut <DB as ::sqlx::database::HasArguments<'q>>::ArgumentBuffer,
        ) -> ::sqlx::encode::IsNull {
            let val = match self {
                Currency::AED => "AED",
                Currency::AFN => "AFN",
                Currency::ALL => "ALL",
                Currency::AMD => "AMD",
                Currency::ANG => "ANG",
                Currency::AOA => "AOA",
                Currency::ARS => "ARS",
                Currency::AUD => "AUD",
                Currency::AWG => "AWG",
                Currency::AZN => "AZN",
                Currency::BAM => "BAM",
                Currency::BBD => "BBD",
                Currency::BDT => "BDT",
                Currency::BGN => "BGN",
                Currency::BHD => "BHD",
                Currency::BIF => "BIF",
                Currency::BMD => "BMD",
                Currency::BND => "BND",
                Currency::BOB => "BOB",
                Currency::BOV => "BOV",
                Currency::BRL => "BRL",
                Currency::BSD => "BSD",
                Currency::BTN => "BTN",
                Currency::BWP => "BWP",
                Currency::BYN => "BYN",
                Currency::BZD => "BZD",
                Currency::CAD => "CAD",
                Currency::CDF => "CDF",
                Currency::CHE => "CHE",
                Currency::CHF => "CHF",
                Currency::CHW => "CHW",
                Currency::CLF => "CLF",
                Currency::CLP => "CLP",
                Currency::CNY => "CNY",
                Currency::COP => "COP",
                Currency::COU => "COU",
                Currency::CRC => "CRC",
                Currency::CUC => "CUC",
                Currency::CUP => "CUP",
                Currency::CVE => "CVE",
                Currency::CZK => "CZK",
                Currency::DJF => "DJF",
                Currency::DKK => "DKK",
                Currency::DOP => "DOP",
                Currency::DZD => "DZD",
                Currency::EGP => "EGP",
                Currency::ERN => "ERN",
                Currency::ETB => "ETB",
                Currency::EUR => "EUR",
                Currency::FJD => "FJD",
                Currency::FKP => "FKP",
                Currency::GBP => "GBP",
                Currency::GEL => "GEL",
                Currency::GHS => "GHS",
                Currency::GIP => "GIP",
                Currency::GMD => "GMD",
                Currency::GNF => "GNF",
                Currency::GTQ => "GTQ",
                Currency::GYD => "GYD",
                Currency::HKD => "HKD",
                Currency::HNL => "HNL",
                Currency::HRK => "HRK",
                Currency::HTG => "HTG",
                Currency::HUF => "HUF",
                Currency::IDR => "IDR",
                Currency::ILS => "ILS",
                Currency::INR => "INR",
                Currency::IQD => "IQD",
                Currency::IRR => "IRR",
                Currency::ISK => "ISK",
                Currency::JMD => "JMD",
                Currency::JOD => "JOD",
                Currency::JPY => "JPY",
                Currency::KES => "KES",
                Currency::KGS => "KGS",
                Currency::KHR => "KHR",
                Currency::KMF => "KMF",
                Currency::KPW => "KPW",
                Currency::KRW => "KRW",
                Currency::KWD => "KWD",
                Currency::KYD => "KYD",
                Currency::KZT => "KZT",
                Currency::LAK => "LAK",
                Currency::LBP => "LBP",
                Currency::LKR => "LKR",
                Currency::LRD => "LRD",
                Currency::LSL => "LSL",
                Currency::LYD => "LYD",
                Currency::MAD => "MAD",
                Currency::MDL => "MDL",
                Currency::MGA => "MGA",
                Currency::MKD => "MKD",
                Currency::MMK => "MMK",
                Currency::MNT => "MNT",
                Currency::MOP => "MOP",
                Currency::MRU => "MRU",
                Currency::MUR => "MUR",
                Currency::MVR => "MVR",
                Currency::MWK => "MWK",
                Currency::MXN => "MXN",
                Currency::MXV => "MXV",
                Currency::MYR => "MYR",
                Currency::MZN => "MZN",
                Currency::NAD => "NAD",
                Currency::NGN => "NGN",
                Currency::NIO => "NIO",
                Currency::NOK => "NOK",
                Currency::NPR => "NPR",
                Currency::NZD => "NZD",
                Currency::OMR => "OMR",
                Currency::PAB => "PAB",
                Currency::PEN => "PEN",
                Currency::PGK => "PGK",
                Currency::PHP => "PHP",
                Currency::PKR => "PKR",
                Currency::PLN => "PLN",
                Currency::PYG => "PYG",
                Currency::QAR => "QAR",
                Currency::RON => "RON",
                Currency::RSD => "RSD",
                Currency::RUB => "RUB",
                Currency::RWF => "RWF",
                Currency::SAR => "SAR",
                Currency::SBD => "SBD",
                Currency::SCR => "SCR",
                Currency::SDG => "SDG",
                Currency::SEK => "SEK",
                Currency::SGD => "SGD",
                Currency::SHP => "SHP",
                Currency::SLL => "SLL",
                Currency::SOS => "SOS",
                Currency::SRD => "SRD",
                Currency::SSP => "SSP",
                Currency::STN => "STN",
                Currency::SVC => "SVC",
                Currency::SYP => "SYP",
                Currency::SZL => "SZL",
                Currency::THB => "THB",
                Currency::TJS => "TJS",
                Currency::TMT => "TMT",
                Currency::TND => "TND",
                Currency::TOP => "TOP",
                Currency::TRY => "TRY",
                Currency::TTD => "TTD",
                Currency::TWD => "TWD",
                Currency::TZS => "TZS",
                Currency::UAH => "UAH",
                Currency::UGX => "UGX",
                Currency::USD => "USD",
                Currency::USN => "USN",
                Currency::UYI => "UYI",
                Currency::UYU => "UYU",
                Currency::UYW => "UYW",
                Currency::UZS => "UZS",
                Currency::VED => "VED",
                Currency::VES => "VES",
                Currency::VND => "VND",
                Currency::VUV => "VUV",
                Currency::WST => "WST",
                Currency::XAF => "XAF",
                Currency::XAG => "XAG",
                Currency::XAU => "XAU",
                Currency::XBA => "XBA",
                Currency::XBB => "XBB",
                Currency::XBC => "XBC",
                Currency::XBD => "XBD",
                Currency::XCD => "XCD",
                Currency::XDR => "XDR",
                Currency::XOF => "XOF",
                Currency::XPD => "XPD",
                Currency::XPF => "XPF",
                Currency::XPT => "XPT",
                Currency::XSU => "XSU",
                Currency::XTS => "XTS",
                Currency::XUA => "XUA",
                Currency::XXX => "XXX",
                Currency::YER => "YER",
                Currency::ZAR => "ZAR",
                Currency::ZMW => "ZMW",
                Currency::ZWL => "ZWL",
            };
            <&::std::primitive::str as ::sqlx::encode::Encode<'q, DB>>::encode(val, buf)
        }
        fn size_hint(&self) -> ::std::primitive::usize {
            let val = match self {
                Currency::AED => "AED",
                Currency::AFN => "AFN",
                Currency::ALL => "ALL",
                Currency::AMD => "AMD",
                Currency::ANG => "ANG",
                Currency::AOA => "AOA",
                Currency::ARS => "ARS",
                Currency::AUD => "AUD",
                Currency::AWG => "AWG",
                Currency::AZN => "AZN",
                Currency::BAM => "BAM",
                Currency::BBD => "BBD",
                Currency::BDT => "BDT",
                Currency::BGN => "BGN",
                Currency::BHD => "BHD",
                Currency::BIF => "BIF",
                Currency::BMD => "BMD",
                Currency::BND => "BND",
                Currency::BOB => "BOB",
                Currency::BOV => "BOV",
                Currency::BRL => "BRL",
                Currency::BSD => "BSD",
                Currency::BTN => "BTN",
                Currency::BWP => "BWP",
                Currency::BYN => "BYN",
                Currency::BZD => "BZD",
                Currency::CAD => "CAD",
                Currency::CDF => "CDF",
                Currency::CHE => "CHE",
                Currency::CHF => "CHF",
                Currency::CHW => "CHW",
                Currency::CLF => "CLF",
                Currency::CLP => "CLP",
                Currency::CNY => "CNY",
                Currency::COP => "COP",
                Currency::COU => "COU",
                Currency::CRC => "CRC",
                Currency::CUC => "CUC",
                Currency::CUP => "CUP",
                Currency::CVE => "CVE",
                Currency::CZK => "CZK",
                Currency::DJF => "DJF",
                Currency::DKK => "DKK",
                Currency::DOP => "DOP",
                Currency::DZD => "DZD",
                Currency::EGP => "EGP",
                Currency::ERN => "ERN",
                Currency::ETB => "ETB",
                Currency::EUR => "EUR",
                Currency::FJD => "FJD",
                Currency::FKP => "FKP",
                Currency::GBP => "GBP",
                Currency::GEL => "GEL",
                Currency::GHS => "GHS",
                Currency::GIP => "GIP",
                Currency::GMD => "GMD",
                Currency::GNF => "GNF",
                Currency::GTQ => "GTQ",
                Currency::GYD => "GYD",
                Currency::HKD => "HKD",
                Currency::HNL => "HNL",
                Currency::HRK => "HRK",
                Currency::HTG => "HTG",
                Currency::HUF => "HUF",
                Currency::IDR => "IDR",
                Currency::ILS => "ILS",
                Currency::INR => "INR",
                Currency::IQD => "IQD",
                Currency::IRR => "IRR",
                Currency::ISK => "ISK",
                Currency::JMD => "JMD",
                Currency::JOD => "JOD",
                Currency::JPY => "JPY",
                Currency::KES => "KES",
                Currency::KGS => "KGS",
                Currency::KHR => "KHR",
                Currency::KMF => "KMF",
                Currency::KPW => "KPW",
                Currency::KRW => "KRW",
                Currency::KWD => "KWD",
                Currency::KYD => "KYD",
                Currency::KZT => "KZT",
                Currency::LAK => "LAK",
                Currency::LBP => "LBP",
                Currency::LKR => "LKR",
                Currency::LRD => "LRD",
                Currency::LSL => "LSL",
                Currency::LYD => "LYD",
                Currency::MAD => "MAD",
                Currency::MDL => "MDL",
                Currency::MGA => "MGA",
                Currency::MKD => "MKD",
                Currency::MMK => "MMK",
                Currency::MNT => "MNT",
                Currency::MOP => "MOP",
                Currency::MRU => "MRU",
                Currency::MUR => "MUR",
                Currency::MVR => "MVR",
                Currency::MWK => "MWK",
                Currency::MXN => "MXN",
                Currency::MXV => "MXV",
                Currency::MYR => "MYR",
                Currency::MZN => "MZN",
                Currency::NAD => "NAD",
                Currency::NGN => "NGN",
                Currency::NIO => "NIO",
                Currency::NOK => "NOK",
                Currency::NPR => "NPR",
                Currency::NZD => "NZD",
                Currency::OMR => "OMR",
                Currency::PAB => "PAB",
                Currency::PEN => "PEN",
                Currency::PGK => "PGK",
                Currency::PHP => "PHP",
                Currency::PKR => "PKR",
                Currency::PLN => "PLN",
                Currency::PYG => "PYG",
                Currency::QAR => "QAR",
                Currency::RON => "RON",
                Currency::RSD => "RSD",
                Currency::RUB => "RUB",
                Currency::RWF => "RWF",
                Currency::SAR => "SAR",
                Currency::SBD => "SBD",
                Currency::SCR => "SCR",
                Currency::SDG => "SDG",
                Currency::SEK => "SEK",
                Currency::SGD => "SGD",
                Currency::SHP => "SHP",
                Currency::SLL => "SLL",
                Currency::SOS => "SOS",
                Currency::SRD => "SRD",
                Currency::SSP => "SSP",
                Currency::STN => "STN",
                Currency::SVC => "SVC",
                Currency::SYP => "SYP",
                Currency::SZL => "SZL",
                Currency::THB => "THB",
                Currency::TJS => "TJS",
                Currency::TMT => "TMT",
                Currency::TND => "TND",
                Currency::TOP => "TOP",
                Currency::TRY => "TRY",
                Currency::TTD => "TTD",
                Currency::TWD => "TWD",
                Currency::TZS => "TZS",
                Currency::UAH => "UAH",
                Currency::UGX => "UGX",
                Currency::USD => "USD",
                Currency::USN => "USN",
                Currency::UYI => "UYI",
                Currency::UYU => "UYU",
                Currency::UYW => "UYW",
                Currency::UZS => "UZS",
                Currency::VED => "VED",
                Currency::VES => "VES",
                Currency::VND => "VND",
                Currency::VUV => "VUV",
                Currency::WST => "WST",
                Currency::XAF => "XAF",
                Currency::XAG => "XAG",
                Currency::XAU => "XAU",
                Currency::XBA => "XBA",
                Currency::XBB => "XBB",
                Currency::XBC => "XBC",
                Currency::XBD => "XBD",
                Currency::XCD => "XCD",
                Currency::XDR => "XDR",
                Currency::XOF => "XOF",
                Currency::XPD => "XPD",
                Currency::XPF => "XPF",
                Currency::XPT => "XPT",
                Currency::XSU => "XSU",
                Currency::XTS => "XTS",
                Currency::XUA => "XUA",
                Currency::XXX => "XXX",
                Currency::YER => "YER",
                Currency::ZAR => "ZAR",
                Currency::ZMW => "ZMW",
                Currency::ZWL => "ZWL",
            };
            <&::std::primitive::str as ::sqlx::encode::Encode<'q, DB>>::size_hint(&val)
        }
    }
    #[automatically_derived]
    impl<'r> ::sqlx::decode::Decode<'r, ::sqlx::postgres::Postgres> for Currency {
        fn decode(
            value: ::sqlx::postgres::PgValueRef<'r>,
        ) -> ::std::result::Result<
            Self,
            ::std::boxed::Box<
                dyn ::std::error::Error + 'static + ::std::marker::Send + ::std::marker::Sync,
            >,
        > {
            let value = <&'r ::std::primitive::str as ::sqlx::decode::Decode<
                'r,
                ::sqlx::postgres::Postgres,
            >>::decode(value)?;
            match value {
                "AED" => ::std::result::Result::Ok(Currency::AED),
                "AFN" => ::std::result::Result::Ok(Currency::AFN),
                "ALL" => ::std::result::Result::Ok(Currency::ALL),
                "AMD" => ::std::result::Result::Ok(Currency::AMD),
                "ANG" => ::std::result::Result::Ok(Currency::ANG),
                "AOA" => ::std::result::Result::Ok(Currency::AOA),
                "ARS" => ::std::result::Result::Ok(Currency::ARS),
                "AUD" => ::std::result::Result::Ok(Currency::AUD),
                "AWG" => ::std::result::Result::Ok(Currency::AWG),
                "AZN" => ::std::result::Result::Ok(Currency::AZN),
                "BAM" => ::std::result::Result::Ok(Currency::BAM),
                "BBD" => ::std::result::Result::Ok(Currency::BBD),
                "BDT" => ::std::result::Result::Ok(Currency::BDT),
                "BGN" => ::std::result::Result::Ok(Currency::BGN),
                "BHD" => ::std::result::Result::Ok(Currency::BHD),
                "BIF" => ::std::result::Result::Ok(Currency::BIF),
                "BMD" => ::std::result::Result::Ok(Currency::BMD),
                "BND" => ::std::result::Result::Ok(Currency::BND),
                "BOB" => ::std::result::Result::Ok(Currency::BOB),
                "BOV" => ::std::result::Result::Ok(Currency::BOV),
                "BRL" => ::std::result::Result::Ok(Currency::BRL),
                "BSD" => ::std::result::Result::Ok(Currency::BSD),
                "BTN" => ::std::result::Result::Ok(Currency::BTN),
                "BWP" => ::std::result::Result::Ok(Currency::BWP),
                "BYN" => ::std::result::Result::Ok(Currency::BYN),
                "BZD" => ::std::result::Result::Ok(Currency::BZD),
                "CAD" => ::std::result::Result::Ok(Currency::CAD),
                "CDF" => ::std::result::Result::Ok(Currency::CDF),
                "CHE" => ::std::result::Result::Ok(Currency::CHE),
                "CHF" => ::std::result::Result::Ok(Currency::CHF),
                "CHW" => ::std::result::Result::Ok(Currency::CHW),
                "CLF" => ::std::result::Result::Ok(Currency::CLF),
                "CLP" => ::std::result::Result::Ok(Currency::CLP),
                "CNY" => ::std::result::Result::Ok(Currency::CNY),
                "COP" => ::std::result::Result::Ok(Currency::COP),
                "COU" => ::std::result::Result::Ok(Currency::COU),
                "CRC" => ::std::result::Result::Ok(Currency::CRC),
                "CUC" => ::std::result::Result::Ok(Currency::CUC),
                "CUP" => ::std::result::Result::Ok(Currency::CUP),
                "CVE" => ::std::result::Result::Ok(Currency::CVE),
                "CZK" => ::std::result::Result::Ok(Currency::CZK),
                "DJF" => ::std::result::Result::Ok(Currency::DJF),
                "DKK" => ::std::result::Result::Ok(Currency::DKK),
                "DOP" => ::std::result::Result::Ok(Currency::DOP),
                "DZD" => ::std::result::Result::Ok(Currency::DZD),
                "EGP" => ::std::result::Result::Ok(Currency::EGP),
                "ERN" => ::std::result::Result::Ok(Currency::ERN),
                "ETB" => ::std::result::Result::Ok(Currency::ETB),
                "EUR" => ::std::result::Result::Ok(Currency::EUR),
                "FJD" => ::std::result::Result::Ok(Currency::FJD),
                "FKP" => ::std::result::Result::Ok(Currency::FKP),
                "GBP" => ::std::result::Result::Ok(Currency::GBP),
                "GEL" => ::std::result::Result::Ok(Currency::GEL),
                "GHS" => ::std::result::Result::Ok(Currency::GHS),
                "GIP" => ::std::result::Result::Ok(Currency::GIP),
                "GMD" => ::std::result::Result::Ok(Currency::GMD),
                "GNF" => ::std::result::Result::Ok(Currency::GNF),
                "GTQ" => ::std::result::Result::Ok(Currency::GTQ),
                "GYD" => ::std::result::Result::Ok(Currency::GYD),
                "HKD" => ::std::result::Result::Ok(Currency::HKD),
                "HNL" => ::std::result::Result::Ok(Currency::HNL),
                "HRK" => ::std::result::Result::Ok(Currency::HRK),
                "HTG" => ::std::result::Result::Ok(Currency::HTG),
                "HUF" => ::std::result::Result::Ok(Currency::HUF),
                "IDR" => ::std::result::Result::Ok(Currency::IDR),
                "ILS" => ::std::result::Result::Ok(Currency::ILS),
                "INR" => ::std::result::Result::Ok(Currency::INR),
                "IQD" => ::std::result::Result::Ok(Currency::IQD),
                "IRR" => ::std::result::Result::Ok(Currency::IRR),
                "ISK" => ::std::result::Result::Ok(Currency::ISK),
                "JMD" => ::std::result::Result::Ok(Currency::JMD),
                "JOD" => ::std::result::Result::Ok(Currency::JOD),
                "JPY" => ::std::result::Result::Ok(Currency::JPY),
                "KES" => ::std::result::Result::Ok(Currency::KES),
                "KGS" => ::std::result::Result::Ok(Currency::KGS),
                "KHR" => ::std::result::Result::Ok(Currency::KHR),
                "KMF" => ::std::result::Result::Ok(Currency::KMF),
                "KPW" => ::std::result::Result::Ok(Currency::KPW),
                "KRW" => ::std::result::Result::Ok(Currency::KRW),
                "KWD" => ::std::result::Result::Ok(Currency::KWD),
                "KYD" => ::std::result::Result::Ok(Currency::KYD),
                "KZT" => ::std::result::Result::Ok(Currency::KZT),
                "LAK" => ::std::result::Result::Ok(Currency::LAK),
                "LBP" => ::std::result::Result::Ok(Currency::LBP),
                "LKR" => ::std::result::Result::Ok(Currency::LKR),
                "LRD" => ::std::result::Result::Ok(Currency::LRD),
                "LSL" => ::std::result::Result::Ok(Currency::LSL),
                "LYD" => ::std::result::Result::Ok(Currency::LYD),
                "MAD" => ::std::result::Result::Ok(Currency::MAD),
                "MDL" => ::std::result::Result::Ok(Currency::MDL),
                "MGA" => ::std::result::Result::Ok(Currency::MGA),
                "MKD" => ::std::result::Result::Ok(Currency::MKD),
                "MMK" => ::std::result::Result::Ok(Currency::MMK),
                "MNT" => ::std::result::Result::Ok(Currency::MNT),
                "MOP" => ::std::result::Result::Ok(Currency::MOP),
                "MRU" => ::std::result::Result::Ok(Currency::MRU),
                "MUR" => ::std::result::Result::Ok(Currency::MUR),
                "MVR" => ::std::result::Result::Ok(Currency::MVR),
                "MWK" => ::std::result::Result::Ok(Currency::MWK),
                "MXN" => ::std::result::Result::Ok(Currency::MXN),
                "MXV" => ::std::result::Result::Ok(Currency::MXV),
                "MYR" => ::std::result::Result::Ok(Currency::MYR),
                "MZN" => ::std::result::Result::Ok(Currency::MZN),
                "NAD" => ::std::result::Result::Ok(Currency::NAD),
                "NGN" => ::std::result::Result::Ok(Currency::NGN),
                "NIO" => ::std::result::Result::Ok(Currency::NIO),
                "NOK" => ::std::result::Result::Ok(Currency::NOK),
                "NPR" => ::std::result::Result::Ok(Currency::NPR),
                "NZD" => ::std::result::Result::Ok(Currency::NZD),
                "OMR" => ::std::result::Result::Ok(Currency::OMR),
                "PAB" => ::std::result::Result::Ok(Currency::PAB),
                "PEN" => ::std::result::Result::Ok(Currency::PEN),
                "PGK" => ::std::result::Result::Ok(Currency::PGK),
                "PHP" => ::std::result::Result::Ok(Currency::PHP),
                "PKR" => ::std::result::Result::Ok(Currency::PKR),
                "PLN" => ::std::result::Result::Ok(Currency::PLN),
                "PYG" => ::std::result::Result::Ok(Currency::PYG),
                "QAR" => ::std::result::Result::Ok(Currency::QAR),
                "RON" => ::std::result::Result::Ok(Currency::RON),
                "RSD" => ::std::result::Result::Ok(Currency::RSD),
                "RUB" => ::std::result::Result::Ok(Currency::RUB),
                "RWF" => ::std::result::Result::Ok(Currency::RWF),
                "SAR" => ::std::result::Result::Ok(Currency::SAR),
                "SBD" => ::std::result::Result::Ok(Currency::SBD),
                "SCR" => ::std::result::Result::Ok(Currency::SCR),
                "SDG" => ::std::result::Result::Ok(Currency::SDG),
                "SEK" => ::std::result::Result::Ok(Currency::SEK),
                "SGD" => ::std::result::Result::Ok(Currency::SGD),
                "SHP" => ::std::result::Result::Ok(Currency::SHP),
                "SLL" => ::std::result::Result::Ok(Currency::SLL),
                "SOS" => ::std::result::Result::Ok(Currency::SOS),
                "SRD" => ::std::result::Result::Ok(Currency::SRD),
                "SSP" => ::std::result::Result::Ok(Currency::SSP),
                "STN" => ::std::result::Result::Ok(Currency::STN),
                "SVC" => ::std::result::Result::Ok(Currency::SVC),
                "SYP" => ::std::result::Result::Ok(Currency::SYP),
                "SZL" => ::std::result::Result::Ok(Currency::SZL),
                "THB" => ::std::result::Result::Ok(Currency::THB),
                "TJS" => ::std::result::Result::Ok(Currency::TJS),
                "TMT" => ::std::result::Result::Ok(Currency::TMT),
                "TND" => ::std::result::Result::Ok(Currency::TND),
                "TOP" => ::std::result::Result::Ok(Currency::TOP),
                "TRY" => ::std::result::Result::Ok(Currency::TRY),
                "TTD" => ::std::result::Result::Ok(Currency::TTD),
                "TWD" => ::std::result::Result::Ok(Currency::TWD),
                "TZS" => ::std::result::Result::Ok(Currency::TZS),
                "UAH" => ::std::result::Result::Ok(Currency::UAH),
                "UGX" => ::std::result::Result::Ok(Currency::UGX),
                "USD" => ::std::result::Result::Ok(Currency::USD),
                "USN" => ::std::result::Result::Ok(Currency::USN),
                "UYI" => ::std::result::Result::Ok(Currency::UYI),
                "UYU" => ::std::result::Result::Ok(Currency::UYU),
                "UYW" => ::std::result::Result::Ok(Currency::UYW),
                "UZS" => ::std::result::Result::Ok(Currency::UZS),
                "VED" => ::std::result::Result::Ok(Currency::VED),
                "VES" => ::std::result::Result::Ok(Currency::VES),
                "VND" => ::std::result::Result::Ok(Currency::VND),
                "VUV" => ::std::result::Result::Ok(Currency::VUV),
                "WST" => ::std::result::Result::Ok(Currency::WST),
                "XAF" => ::std::result::Result::Ok(Currency::XAF),
                "XAG" => ::std::result::Result::Ok(Currency::XAG),
                "XAU" => ::std::result::Result::Ok(Currency::XAU),
                "XBA" => ::std::result::Result::Ok(Currency::XBA),
                "XBB" => ::std::result::Result::Ok(Currency::XBB),
                "XBC" => ::std::result::Result::Ok(Currency::XBC),
                "XBD" => ::std::result::Result::Ok(Currency::XBD),
                "XCD" => ::std::result::Result::Ok(Currency::XCD),
                "XDR" => ::std::result::Result::Ok(Currency::XDR),
                "XOF" => ::std::result::Result::Ok(Currency::XOF),
                "XPD" => ::std::result::Result::Ok(Currency::XPD),
                "XPF" => ::std::result::Result::Ok(Currency::XPF),
                "XPT" => ::std::result::Result::Ok(Currency::XPT),
                "XSU" => ::std::result::Result::Ok(Currency::XSU),
                "XTS" => ::std::result::Result::Ok(Currency::XTS),
                "XUA" => ::std::result::Result::Ok(Currency::XUA),
                "XXX" => ::std::result::Result::Ok(Currency::XXX),
                "YER" => ::std::result::Result::Ok(Currency::YER),
                "ZAR" => ::std::result::Result::Ok(Currency::ZAR),
                "ZMW" => ::std::result::Result::Ok(Currency::ZMW),
                "ZWL" => ::std::result::Result::Ok(Currency::ZWL),
                _ => Err({
                    let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                        &["invalid value ", " for enum "],
                        &[
                            ::core::fmt::ArgumentV1::new_debug(&value),
                            ::core::fmt::ArgumentV1::new_display(&"Currency"),
                        ],
                    ));
                    res
                }
                .into()),
            }
        }
    }
    #[automatically_derived]
    impl ::sqlx::Type<::sqlx::Postgres> for Currency {
        fn type_info() -> ::sqlx::postgres::PgTypeInfo {
            ::sqlx::postgres::PgTypeInfo::with_name("currency")
        }
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for Currency {
            fn deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                    __field13,
                    __field14,
                    __field15,
                    __field16,
                    __field17,
                    __field18,
                    __field19,
                    __field20,
                    __field21,
                    __field22,
                    __field23,
                    __field24,
                    __field25,
                    __field26,
                    __field27,
                    __field28,
                    __field29,
                    __field30,
                    __field31,
                    __field32,
                    __field33,
                    __field34,
                    __field35,
                    __field36,
                    __field37,
                    __field38,
                    __field39,
                    __field40,
                    __field41,
                    __field42,
                    __field43,
                    __field44,
                    __field45,
                    __field46,
                    __field47,
                    __field48,
                    __field49,
                    __field50,
                    __field51,
                    __field52,
                    __field53,
                    __field54,
                    __field55,
                    __field56,
                    __field57,
                    __field58,
                    __field59,
                    __field60,
                    __field61,
                    __field62,
                    __field63,
                    __field64,
                    __field65,
                    __field66,
                    __field67,
                    __field68,
                    __field69,
                    __field70,
                    __field71,
                    __field72,
                    __field73,
                    __field74,
                    __field75,
                    __field76,
                    __field77,
                    __field78,
                    __field79,
                    __field80,
                    __field81,
                    __field82,
                    __field83,
                    __field84,
                    __field85,
                    __field86,
                    __field87,
                    __field88,
                    __field89,
                    __field90,
                    __field91,
                    __field92,
                    __field93,
                    __field94,
                    __field95,
                    __field96,
                    __field97,
                    __field98,
                    __field99,
                    __field100,
                    __field101,
                    __field102,
                    __field103,
                    __field104,
                    __field105,
                    __field106,
                    __field107,
                    __field108,
                    __field109,
                    __field110,
                    __field111,
                    __field112,
                    __field113,
                    __field114,
                    __field115,
                    __field116,
                    __field117,
                    __field118,
                    __field119,
                    __field120,
                    __field121,
                    __field122,
                    __field123,
                    __field124,
                    __field125,
                    __field126,
                    __field127,
                    __field128,
                    __field129,
                    __field130,
                    __field131,
                    __field132,
                    __field133,
                    __field134,
                    __field135,
                    __field136,
                    __field137,
                    __field138,
                    __field139,
                    __field140,
                    __field141,
                    __field142,
                    __field143,
                    __field144,
                    __field145,
                    __field146,
                    __field147,
                    __field148,
                    __field149,
                    __field150,
                    __field151,
                    __field152,
                    __field153,
                    __field154,
                    __field155,
                    __field156,
                    __field157,
                    __field158,
                    __field159,
                    __field160,
                    __field161,
                    __field162,
                    __field163,
                    __field164,
                    __field165,
                    __field166,
                    __field167,
                    __field168,
                    __field169,
                    __field170,
                    __field171,
                    __field172,
                    __field173,
                    __field174,
                    __field175,
                    __field176,
                    __field177,
                    __field178,
                    __field179,
                }
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter, "variant identifier")
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            13u64 => _serde::__private::Ok(__Field::__field13),
                            14u64 => _serde::__private::Ok(__Field::__field14),
                            15u64 => _serde::__private::Ok(__Field::__field15),
                            16u64 => _serde::__private::Ok(__Field::__field16),
                            17u64 => _serde::__private::Ok(__Field::__field17),
                            18u64 => _serde::__private::Ok(__Field::__field18),
                            19u64 => _serde::__private::Ok(__Field::__field19),
                            20u64 => _serde::__private::Ok(__Field::__field20),
                            21u64 => _serde::__private::Ok(__Field::__field21),
                            22u64 => _serde::__private::Ok(__Field::__field22),
                            23u64 => _serde::__private::Ok(__Field::__field23),
                            24u64 => _serde::__private::Ok(__Field::__field24),
                            25u64 => _serde::__private::Ok(__Field::__field25),
                            26u64 => _serde::__private::Ok(__Field::__field26),
                            27u64 => _serde::__private::Ok(__Field::__field27),
                            28u64 => _serde::__private::Ok(__Field::__field28),
                            29u64 => _serde::__private::Ok(__Field::__field29),
                            30u64 => _serde::__private::Ok(__Field::__field30),
                            31u64 => _serde::__private::Ok(__Field::__field31),
                            32u64 => _serde::__private::Ok(__Field::__field32),
                            33u64 => _serde::__private::Ok(__Field::__field33),
                            34u64 => _serde::__private::Ok(__Field::__field34),
                            35u64 => _serde::__private::Ok(__Field::__field35),
                            36u64 => _serde::__private::Ok(__Field::__field36),
                            37u64 => _serde::__private::Ok(__Field::__field37),
                            38u64 => _serde::__private::Ok(__Field::__field38),
                            39u64 => _serde::__private::Ok(__Field::__field39),
                            40u64 => _serde::__private::Ok(__Field::__field40),
                            41u64 => _serde::__private::Ok(__Field::__field41),
                            42u64 => _serde::__private::Ok(__Field::__field42),
                            43u64 => _serde::__private::Ok(__Field::__field43),
                            44u64 => _serde::__private::Ok(__Field::__field44),
                            45u64 => _serde::__private::Ok(__Field::__field45),
                            46u64 => _serde::__private::Ok(__Field::__field46),
                            47u64 => _serde::__private::Ok(__Field::__field47),
                            48u64 => _serde::__private::Ok(__Field::__field48),
                            49u64 => _serde::__private::Ok(__Field::__field49),
                            50u64 => _serde::__private::Ok(__Field::__field50),
                            51u64 => _serde::__private::Ok(__Field::__field51),
                            52u64 => _serde::__private::Ok(__Field::__field52),
                            53u64 => _serde::__private::Ok(__Field::__field53),
                            54u64 => _serde::__private::Ok(__Field::__field54),
                            55u64 => _serde::__private::Ok(__Field::__field55),
                            56u64 => _serde::__private::Ok(__Field::__field56),
                            57u64 => _serde::__private::Ok(__Field::__field57),
                            58u64 => _serde::__private::Ok(__Field::__field58),
                            59u64 => _serde::__private::Ok(__Field::__field59),
                            60u64 => _serde::__private::Ok(__Field::__field60),
                            61u64 => _serde::__private::Ok(__Field::__field61),
                            62u64 => _serde::__private::Ok(__Field::__field62),
                            63u64 => _serde::__private::Ok(__Field::__field63),
                            64u64 => _serde::__private::Ok(__Field::__field64),
                            65u64 => _serde::__private::Ok(__Field::__field65),
                            66u64 => _serde::__private::Ok(__Field::__field66),
                            67u64 => _serde::__private::Ok(__Field::__field67),
                            68u64 => _serde::__private::Ok(__Field::__field68),
                            69u64 => _serde::__private::Ok(__Field::__field69),
                            70u64 => _serde::__private::Ok(__Field::__field70),
                            71u64 => _serde::__private::Ok(__Field::__field71),
                            72u64 => _serde::__private::Ok(__Field::__field72),
                            73u64 => _serde::__private::Ok(__Field::__field73),
                            74u64 => _serde::__private::Ok(__Field::__field74),
                            75u64 => _serde::__private::Ok(__Field::__field75),
                            76u64 => _serde::__private::Ok(__Field::__field76),
                            77u64 => _serde::__private::Ok(__Field::__field77),
                            78u64 => _serde::__private::Ok(__Field::__field78),
                            79u64 => _serde::__private::Ok(__Field::__field79),
                            80u64 => _serde::__private::Ok(__Field::__field80),
                            81u64 => _serde::__private::Ok(__Field::__field81),
                            82u64 => _serde::__private::Ok(__Field::__field82),
                            83u64 => _serde::__private::Ok(__Field::__field83),
                            84u64 => _serde::__private::Ok(__Field::__field84),
                            85u64 => _serde::__private::Ok(__Field::__field85),
                            86u64 => _serde::__private::Ok(__Field::__field86),
                            87u64 => _serde::__private::Ok(__Field::__field87),
                            88u64 => _serde::__private::Ok(__Field::__field88),
                            89u64 => _serde::__private::Ok(__Field::__field89),
                            90u64 => _serde::__private::Ok(__Field::__field90),
                            91u64 => _serde::__private::Ok(__Field::__field91),
                            92u64 => _serde::__private::Ok(__Field::__field92),
                            93u64 => _serde::__private::Ok(__Field::__field93),
                            94u64 => _serde::__private::Ok(__Field::__field94),
                            95u64 => _serde::__private::Ok(__Field::__field95),
                            96u64 => _serde::__private::Ok(__Field::__field96),
                            97u64 => _serde::__private::Ok(__Field::__field97),
                            98u64 => _serde::__private::Ok(__Field::__field98),
                            99u64 => _serde::__private::Ok(__Field::__field99),
                            100u64 => _serde::__private::Ok(__Field::__field100),
                            101u64 => _serde::__private::Ok(__Field::__field101),
                            102u64 => _serde::__private::Ok(__Field::__field102),
                            103u64 => _serde::__private::Ok(__Field::__field103),
                            104u64 => _serde::__private::Ok(__Field::__field104),
                            105u64 => _serde::__private::Ok(__Field::__field105),
                            106u64 => _serde::__private::Ok(__Field::__field106),
                            107u64 => _serde::__private::Ok(__Field::__field107),
                            108u64 => _serde::__private::Ok(__Field::__field108),
                            109u64 => _serde::__private::Ok(__Field::__field109),
                            110u64 => _serde::__private::Ok(__Field::__field110),
                            111u64 => _serde::__private::Ok(__Field::__field111),
                            112u64 => _serde::__private::Ok(__Field::__field112),
                            113u64 => _serde::__private::Ok(__Field::__field113),
                            114u64 => _serde::__private::Ok(__Field::__field114),
                            115u64 => _serde::__private::Ok(__Field::__field115),
                            116u64 => _serde::__private::Ok(__Field::__field116),
                            117u64 => _serde::__private::Ok(__Field::__field117),
                            118u64 => _serde::__private::Ok(__Field::__field118),
                            119u64 => _serde::__private::Ok(__Field::__field119),
                            120u64 => _serde::__private::Ok(__Field::__field120),
                            121u64 => _serde::__private::Ok(__Field::__field121),
                            122u64 => _serde::__private::Ok(__Field::__field122),
                            123u64 => _serde::__private::Ok(__Field::__field123),
                            124u64 => _serde::__private::Ok(__Field::__field124),
                            125u64 => _serde::__private::Ok(__Field::__field125),
                            126u64 => _serde::__private::Ok(__Field::__field126),
                            127u64 => _serde::__private::Ok(__Field::__field127),
                            128u64 => _serde::__private::Ok(__Field::__field128),
                            129u64 => _serde::__private::Ok(__Field::__field129),
                            130u64 => _serde::__private::Ok(__Field::__field130),
                            131u64 => _serde::__private::Ok(__Field::__field131),
                            132u64 => _serde::__private::Ok(__Field::__field132),
                            133u64 => _serde::__private::Ok(__Field::__field133),
                            134u64 => _serde::__private::Ok(__Field::__field134),
                            135u64 => _serde::__private::Ok(__Field::__field135),
                            136u64 => _serde::__private::Ok(__Field::__field136),
                            137u64 => _serde::__private::Ok(__Field::__field137),
                            138u64 => _serde::__private::Ok(__Field::__field138),
                            139u64 => _serde::__private::Ok(__Field::__field139),
                            140u64 => _serde::__private::Ok(__Field::__field140),
                            141u64 => _serde::__private::Ok(__Field::__field141),
                            142u64 => _serde::__private::Ok(__Field::__field142),
                            143u64 => _serde::__private::Ok(__Field::__field143),
                            144u64 => _serde::__private::Ok(__Field::__field144),
                            145u64 => _serde::__private::Ok(__Field::__field145),
                            146u64 => _serde::__private::Ok(__Field::__field146),
                            147u64 => _serde::__private::Ok(__Field::__field147),
                            148u64 => _serde::__private::Ok(__Field::__field148),
                            149u64 => _serde::__private::Ok(__Field::__field149),
                            150u64 => _serde::__private::Ok(__Field::__field150),
                            151u64 => _serde::__private::Ok(__Field::__field151),
                            152u64 => _serde::__private::Ok(__Field::__field152),
                            153u64 => _serde::__private::Ok(__Field::__field153),
                            154u64 => _serde::__private::Ok(__Field::__field154),
                            155u64 => _serde::__private::Ok(__Field::__field155),
                            156u64 => _serde::__private::Ok(__Field::__field156),
                            157u64 => _serde::__private::Ok(__Field::__field157),
                            158u64 => _serde::__private::Ok(__Field::__field158),
                            159u64 => _serde::__private::Ok(__Field::__field159),
                            160u64 => _serde::__private::Ok(__Field::__field160),
                            161u64 => _serde::__private::Ok(__Field::__field161),
                            162u64 => _serde::__private::Ok(__Field::__field162),
                            163u64 => _serde::__private::Ok(__Field::__field163),
                            164u64 => _serde::__private::Ok(__Field::__field164),
                            165u64 => _serde::__private::Ok(__Field::__field165),
                            166u64 => _serde::__private::Ok(__Field::__field166),
                            167u64 => _serde::__private::Ok(__Field::__field167),
                            168u64 => _serde::__private::Ok(__Field::__field168),
                            169u64 => _serde::__private::Ok(__Field::__field169),
                            170u64 => _serde::__private::Ok(__Field::__field170),
                            171u64 => _serde::__private::Ok(__Field::__field171),
                            172u64 => _serde::__private::Ok(__Field::__field172),
                            173u64 => _serde::__private::Ok(__Field::__field173),
                            174u64 => _serde::__private::Ok(__Field::__field174),
                            175u64 => _serde::__private::Ok(__Field::__field175),
                            176u64 => _serde::__private::Ok(__Field::__field176),
                            177u64 => _serde::__private::Ok(__Field::__field177),
                            178u64 => _serde::__private::Ok(__Field::__field178),
                            179u64 => _serde::__private::Ok(__Field::__field179),
                            _ => _serde::__private::Err(_serde::de::Error::invalid_value(
                                _serde::de::Unexpected::Unsigned(__value),
                                &"variant index 0 <= i < 180",
                            )),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "AED" => _serde::__private::Ok(__Field::__field0),
                            "AFN" => _serde::__private::Ok(__Field::__field1),
                            "ALL" => _serde::__private::Ok(__Field::__field2),
                            "AMD" => _serde::__private::Ok(__Field::__field3),
                            "ANG" => _serde::__private::Ok(__Field::__field4),
                            "AOA" => _serde::__private::Ok(__Field::__field5),
                            "ARS" => _serde::__private::Ok(__Field::__field6),
                            "AUD" => _serde::__private::Ok(__Field::__field7),
                            "AWG" => _serde::__private::Ok(__Field::__field8),
                            "AZN" => _serde::__private::Ok(__Field::__field9),
                            "BAM" => _serde::__private::Ok(__Field::__field10),
                            "BBD" => _serde::__private::Ok(__Field::__field11),
                            "BDT" => _serde::__private::Ok(__Field::__field12),
                            "BGN" => _serde::__private::Ok(__Field::__field13),
                            "BHD" => _serde::__private::Ok(__Field::__field14),
                            "BIF" => _serde::__private::Ok(__Field::__field15),
                            "BMD" => _serde::__private::Ok(__Field::__field16),
                            "BND" => _serde::__private::Ok(__Field::__field17),
                            "BOB" => _serde::__private::Ok(__Field::__field18),
                            "BOV" => _serde::__private::Ok(__Field::__field19),
                            "BRL" => _serde::__private::Ok(__Field::__field20),
                            "BSD" => _serde::__private::Ok(__Field::__field21),
                            "BTN" => _serde::__private::Ok(__Field::__field22),
                            "BWP" => _serde::__private::Ok(__Field::__field23),
                            "BYN" => _serde::__private::Ok(__Field::__field24),
                            "BZD" => _serde::__private::Ok(__Field::__field25),
                            "CAD" => _serde::__private::Ok(__Field::__field26),
                            "CDF" => _serde::__private::Ok(__Field::__field27),
                            "CHE" => _serde::__private::Ok(__Field::__field28),
                            "CHF" => _serde::__private::Ok(__Field::__field29),
                            "CHW" => _serde::__private::Ok(__Field::__field30),
                            "CLF" => _serde::__private::Ok(__Field::__field31),
                            "CLP" => _serde::__private::Ok(__Field::__field32),
                            "CNY" => _serde::__private::Ok(__Field::__field33),
                            "COP" => _serde::__private::Ok(__Field::__field34),
                            "COU" => _serde::__private::Ok(__Field::__field35),
                            "CRC" => _serde::__private::Ok(__Field::__field36),
                            "CUC" => _serde::__private::Ok(__Field::__field37),
                            "CUP" => _serde::__private::Ok(__Field::__field38),
                            "CVE" => _serde::__private::Ok(__Field::__field39),
                            "CZK" => _serde::__private::Ok(__Field::__field40),
                            "DJF" => _serde::__private::Ok(__Field::__field41),
                            "DKK" => _serde::__private::Ok(__Field::__field42),
                            "DOP" => _serde::__private::Ok(__Field::__field43),
                            "DZD" => _serde::__private::Ok(__Field::__field44),
                            "EGP" => _serde::__private::Ok(__Field::__field45),
                            "ERN" => _serde::__private::Ok(__Field::__field46),
                            "ETB" => _serde::__private::Ok(__Field::__field47),
                            "EUR" => _serde::__private::Ok(__Field::__field48),
                            "FJD" => _serde::__private::Ok(__Field::__field49),
                            "FKP" => _serde::__private::Ok(__Field::__field50),
                            "GBP" => _serde::__private::Ok(__Field::__field51),
                            "GEL" => _serde::__private::Ok(__Field::__field52),
                            "GHS" => _serde::__private::Ok(__Field::__field53),
                            "GIP" => _serde::__private::Ok(__Field::__field54),
                            "GMD" => _serde::__private::Ok(__Field::__field55),
                            "GNF" => _serde::__private::Ok(__Field::__field56),
                            "GTQ" => _serde::__private::Ok(__Field::__field57),
                            "GYD" => _serde::__private::Ok(__Field::__field58),
                            "HKD" => _serde::__private::Ok(__Field::__field59),
                            "HNL" => _serde::__private::Ok(__Field::__field60),
                            "HRK" => _serde::__private::Ok(__Field::__field61),
                            "HTG" => _serde::__private::Ok(__Field::__field62),
                            "HUF" => _serde::__private::Ok(__Field::__field63),
                            "IDR" => _serde::__private::Ok(__Field::__field64),
                            "ILS" => _serde::__private::Ok(__Field::__field65),
                            "INR" => _serde::__private::Ok(__Field::__field66),
                            "IQD" => _serde::__private::Ok(__Field::__field67),
                            "IRR" => _serde::__private::Ok(__Field::__field68),
                            "ISK" => _serde::__private::Ok(__Field::__field69),
                            "JMD" => _serde::__private::Ok(__Field::__field70),
                            "JOD" => _serde::__private::Ok(__Field::__field71),
                            "JPY" => _serde::__private::Ok(__Field::__field72),
                            "KES" => _serde::__private::Ok(__Field::__field73),
                            "KGS" => _serde::__private::Ok(__Field::__field74),
                            "KHR" => _serde::__private::Ok(__Field::__field75),
                            "KMF" => _serde::__private::Ok(__Field::__field76),
                            "KPW" => _serde::__private::Ok(__Field::__field77),
                            "KRW" => _serde::__private::Ok(__Field::__field78),
                            "KWD" => _serde::__private::Ok(__Field::__field79),
                            "KYD" => _serde::__private::Ok(__Field::__field80),
                            "KZT" => _serde::__private::Ok(__Field::__field81),
                            "LAK" => _serde::__private::Ok(__Field::__field82),
                            "LBP" => _serde::__private::Ok(__Field::__field83),
                            "LKR" => _serde::__private::Ok(__Field::__field84),
                            "LRD" => _serde::__private::Ok(__Field::__field85),
                            "LSL" => _serde::__private::Ok(__Field::__field86),
                            "LYD" => _serde::__private::Ok(__Field::__field87),
                            "MAD" => _serde::__private::Ok(__Field::__field88),
                            "MDL" => _serde::__private::Ok(__Field::__field89),
                            "MGA" => _serde::__private::Ok(__Field::__field90),
                            "MKD" => _serde::__private::Ok(__Field::__field91),
                            "MMK" => _serde::__private::Ok(__Field::__field92),
                            "MNT" => _serde::__private::Ok(__Field::__field93),
                            "MOP" => _serde::__private::Ok(__Field::__field94),
                            "MRU" => _serde::__private::Ok(__Field::__field95),
                            "MUR" => _serde::__private::Ok(__Field::__field96),
                            "MVR" => _serde::__private::Ok(__Field::__field97),
                            "MWK" => _serde::__private::Ok(__Field::__field98),
                            "MXN" => _serde::__private::Ok(__Field::__field99),
                            "MXV" => _serde::__private::Ok(__Field::__field100),
                            "MYR" => _serde::__private::Ok(__Field::__field101),
                            "MZN" => _serde::__private::Ok(__Field::__field102),
                            "NAD" => _serde::__private::Ok(__Field::__field103),
                            "NGN" => _serde::__private::Ok(__Field::__field104),
                            "NIO" => _serde::__private::Ok(__Field::__field105),
                            "NOK" => _serde::__private::Ok(__Field::__field106),
                            "NPR" => _serde::__private::Ok(__Field::__field107),
                            "NZD" => _serde::__private::Ok(__Field::__field108),
                            "OMR" => _serde::__private::Ok(__Field::__field109),
                            "PAB" => _serde::__private::Ok(__Field::__field110),
                            "PEN" => _serde::__private::Ok(__Field::__field111),
                            "PGK" => _serde::__private::Ok(__Field::__field112),
                            "PHP" => _serde::__private::Ok(__Field::__field113),
                            "PKR" => _serde::__private::Ok(__Field::__field114),
                            "PLN" => _serde::__private::Ok(__Field::__field115),
                            "PYG" => _serde::__private::Ok(__Field::__field116),
                            "QAR" => _serde::__private::Ok(__Field::__field117),
                            "RON" => _serde::__private::Ok(__Field::__field118),
                            "RSD" => _serde::__private::Ok(__Field::__field119),
                            "RUB" => _serde::__private::Ok(__Field::__field120),
                            "RWF" => _serde::__private::Ok(__Field::__field121),
                            "SAR" => _serde::__private::Ok(__Field::__field122),
                            "SBD" => _serde::__private::Ok(__Field::__field123),
                            "SCR" => _serde::__private::Ok(__Field::__field124),
                            "SDG" => _serde::__private::Ok(__Field::__field125),
                            "SEK" => _serde::__private::Ok(__Field::__field126),
                            "SGD" => _serde::__private::Ok(__Field::__field127),
                            "SHP" => _serde::__private::Ok(__Field::__field128),
                            "SLL" => _serde::__private::Ok(__Field::__field129),
                            "SOS" => _serde::__private::Ok(__Field::__field130),
                            "SRD" => _serde::__private::Ok(__Field::__field131),
                            "SSP" => _serde::__private::Ok(__Field::__field132),
                            "STN" => _serde::__private::Ok(__Field::__field133),
                            "SVC" => _serde::__private::Ok(__Field::__field134),
                            "SYP" => _serde::__private::Ok(__Field::__field135),
                            "SZL" => _serde::__private::Ok(__Field::__field136),
                            "THB" => _serde::__private::Ok(__Field::__field137),
                            "TJS" => _serde::__private::Ok(__Field::__field138),
                            "TMT" => _serde::__private::Ok(__Field::__field139),
                            "TND" => _serde::__private::Ok(__Field::__field140),
                            "TOP" => _serde::__private::Ok(__Field::__field141),
                            "TRY" => _serde::__private::Ok(__Field::__field142),
                            "TTD" => _serde::__private::Ok(__Field::__field143),
                            "TWD" => _serde::__private::Ok(__Field::__field144),
                            "TZS" => _serde::__private::Ok(__Field::__field145),
                            "UAH" => _serde::__private::Ok(__Field::__field146),
                            "UGX" => _serde::__private::Ok(__Field::__field147),
                            "USD" => _serde::__private::Ok(__Field::__field148),
                            "USN" => _serde::__private::Ok(__Field::__field149),
                            "UYI" => _serde::__private::Ok(__Field::__field150),
                            "UYU" => _serde::__private::Ok(__Field::__field151),
                            "UYW" => _serde::__private::Ok(__Field::__field152),
                            "UZS" => _serde::__private::Ok(__Field::__field153),
                            "VED" => _serde::__private::Ok(__Field::__field154),
                            "VES" => _serde::__private::Ok(__Field::__field155),
                            "VND" => _serde::__private::Ok(__Field::__field156),
                            "VUV" => _serde::__private::Ok(__Field::__field157),
                            "WST" => _serde::__private::Ok(__Field::__field158),
                            "XAF" => _serde::__private::Ok(__Field::__field159),
                            "XAG" => _serde::__private::Ok(__Field::__field160),
                            "XAU" => _serde::__private::Ok(__Field::__field161),
                            "XBA" => _serde::__private::Ok(__Field::__field162),
                            "XBB" => _serde::__private::Ok(__Field::__field163),
                            "XBC" => _serde::__private::Ok(__Field::__field164),
                            "XBD" => _serde::__private::Ok(__Field::__field165),
                            "XCD" => _serde::__private::Ok(__Field::__field166),
                            "XDR" => _serde::__private::Ok(__Field::__field167),
                            "XOF" => _serde::__private::Ok(__Field::__field168),
                            "XPD" => _serde::__private::Ok(__Field::__field169),
                            "XPF" => _serde::__private::Ok(__Field::__field170),
                            "XPT" => _serde::__private::Ok(__Field::__field171),
                            "XSU" => _serde::__private::Ok(__Field::__field172),
                            "XTS" => _serde::__private::Ok(__Field::__field173),
                            "XUA" => _serde::__private::Ok(__Field::__field174),
                            "XXX" => _serde::__private::Ok(__Field::__field175),
                            "YER" => _serde::__private::Ok(__Field::__field176),
                            "ZAR" => _serde::__private::Ok(__Field::__field177),
                            "ZMW" => _serde::__private::Ok(__Field::__field178),
                            "ZWL" => _serde::__private::Ok(__Field::__field179),
                            _ => _serde::__private::Err(_serde::de::Error::unknown_variant(
                                __value, VARIANTS,
                            )),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"AED" => _serde::__private::Ok(__Field::__field0),
                            b"AFN" => _serde::__private::Ok(__Field::__field1),
                            b"ALL" => _serde::__private::Ok(__Field::__field2),
                            b"AMD" => _serde::__private::Ok(__Field::__field3),
                            b"ANG" => _serde::__private::Ok(__Field::__field4),
                            b"AOA" => _serde::__private::Ok(__Field::__field5),
                            b"ARS" => _serde::__private::Ok(__Field::__field6),
                            b"AUD" => _serde::__private::Ok(__Field::__field7),
                            b"AWG" => _serde::__private::Ok(__Field::__field8),
                            b"AZN" => _serde::__private::Ok(__Field::__field9),
                            b"BAM" => _serde::__private::Ok(__Field::__field10),
                            b"BBD" => _serde::__private::Ok(__Field::__field11),
                            b"BDT" => _serde::__private::Ok(__Field::__field12),
                            b"BGN" => _serde::__private::Ok(__Field::__field13),
                            b"BHD" => _serde::__private::Ok(__Field::__field14),
                            b"BIF" => _serde::__private::Ok(__Field::__field15),
                            b"BMD" => _serde::__private::Ok(__Field::__field16),
                            b"BND" => _serde::__private::Ok(__Field::__field17),
                            b"BOB" => _serde::__private::Ok(__Field::__field18),
                            b"BOV" => _serde::__private::Ok(__Field::__field19),
                            b"BRL" => _serde::__private::Ok(__Field::__field20),
                            b"BSD" => _serde::__private::Ok(__Field::__field21),
                            b"BTN" => _serde::__private::Ok(__Field::__field22),
                            b"BWP" => _serde::__private::Ok(__Field::__field23),
                            b"BYN" => _serde::__private::Ok(__Field::__field24),
                            b"BZD" => _serde::__private::Ok(__Field::__field25),
                            b"CAD" => _serde::__private::Ok(__Field::__field26),
                            b"CDF" => _serde::__private::Ok(__Field::__field27),
                            b"CHE" => _serde::__private::Ok(__Field::__field28),
                            b"CHF" => _serde::__private::Ok(__Field::__field29),
                            b"CHW" => _serde::__private::Ok(__Field::__field30),
                            b"CLF" => _serde::__private::Ok(__Field::__field31),
                            b"CLP" => _serde::__private::Ok(__Field::__field32),
                            b"CNY" => _serde::__private::Ok(__Field::__field33),
                            b"COP" => _serde::__private::Ok(__Field::__field34),
                            b"COU" => _serde::__private::Ok(__Field::__field35),
                            b"CRC" => _serde::__private::Ok(__Field::__field36),
                            b"CUC" => _serde::__private::Ok(__Field::__field37),
                            b"CUP" => _serde::__private::Ok(__Field::__field38),
                            b"CVE" => _serde::__private::Ok(__Field::__field39),
                            b"CZK" => _serde::__private::Ok(__Field::__field40),
                            b"DJF" => _serde::__private::Ok(__Field::__field41),
                            b"DKK" => _serde::__private::Ok(__Field::__field42),
                            b"DOP" => _serde::__private::Ok(__Field::__field43),
                            b"DZD" => _serde::__private::Ok(__Field::__field44),
                            b"EGP" => _serde::__private::Ok(__Field::__field45),
                            b"ERN" => _serde::__private::Ok(__Field::__field46),
                            b"ETB" => _serde::__private::Ok(__Field::__field47),
                            b"EUR" => _serde::__private::Ok(__Field::__field48),
                            b"FJD" => _serde::__private::Ok(__Field::__field49),
                            b"FKP" => _serde::__private::Ok(__Field::__field50),
                            b"GBP" => _serde::__private::Ok(__Field::__field51),
                            b"GEL" => _serde::__private::Ok(__Field::__field52),
                            b"GHS" => _serde::__private::Ok(__Field::__field53),
                            b"GIP" => _serde::__private::Ok(__Field::__field54),
                            b"GMD" => _serde::__private::Ok(__Field::__field55),
                            b"GNF" => _serde::__private::Ok(__Field::__field56),
                            b"GTQ" => _serde::__private::Ok(__Field::__field57),
                            b"GYD" => _serde::__private::Ok(__Field::__field58),
                            b"HKD" => _serde::__private::Ok(__Field::__field59),
                            b"HNL" => _serde::__private::Ok(__Field::__field60),
                            b"HRK" => _serde::__private::Ok(__Field::__field61),
                            b"HTG" => _serde::__private::Ok(__Field::__field62),
                            b"HUF" => _serde::__private::Ok(__Field::__field63),
                            b"IDR" => _serde::__private::Ok(__Field::__field64),
                            b"ILS" => _serde::__private::Ok(__Field::__field65),
                            b"INR" => _serde::__private::Ok(__Field::__field66),
                            b"IQD" => _serde::__private::Ok(__Field::__field67),
                            b"IRR" => _serde::__private::Ok(__Field::__field68),
                            b"ISK" => _serde::__private::Ok(__Field::__field69),
                            b"JMD" => _serde::__private::Ok(__Field::__field70),
                            b"JOD" => _serde::__private::Ok(__Field::__field71),
                            b"JPY" => _serde::__private::Ok(__Field::__field72),
                            b"KES" => _serde::__private::Ok(__Field::__field73),
                            b"KGS" => _serde::__private::Ok(__Field::__field74),
                            b"KHR" => _serde::__private::Ok(__Field::__field75),
                            b"KMF" => _serde::__private::Ok(__Field::__field76),
                            b"KPW" => _serde::__private::Ok(__Field::__field77),
                            b"KRW" => _serde::__private::Ok(__Field::__field78),
                            b"KWD" => _serde::__private::Ok(__Field::__field79),
                            b"KYD" => _serde::__private::Ok(__Field::__field80),
                            b"KZT" => _serde::__private::Ok(__Field::__field81),
                            b"LAK" => _serde::__private::Ok(__Field::__field82),
                            b"LBP" => _serde::__private::Ok(__Field::__field83),
                            b"LKR" => _serde::__private::Ok(__Field::__field84),
                            b"LRD" => _serde::__private::Ok(__Field::__field85),
                            b"LSL" => _serde::__private::Ok(__Field::__field86),
                            b"LYD" => _serde::__private::Ok(__Field::__field87),
                            b"MAD" => _serde::__private::Ok(__Field::__field88),
                            b"MDL" => _serde::__private::Ok(__Field::__field89),
                            b"MGA" => _serde::__private::Ok(__Field::__field90),
                            b"MKD" => _serde::__private::Ok(__Field::__field91),
                            b"MMK" => _serde::__private::Ok(__Field::__field92),
                            b"MNT" => _serde::__private::Ok(__Field::__field93),
                            b"MOP" => _serde::__private::Ok(__Field::__field94),
                            b"MRU" => _serde::__private::Ok(__Field::__field95),
                            b"MUR" => _serde::__private::Ok(__Field::__field96),
                            b"MVR" => _serde::__private::Ok(__Field::__field97),
                            b"MWK" => _serde::__private::Ok(__Field::__field98),
                            b"MXN" => _serde::__private::Ok(__Field::__field99),
                            b"MXV" => _serde::__private::Ok(__Field::__field100),
                            b"MYR" => _serde::__private::Ok(__Field::__field101),
                            b"MZN" => _serde::__private::Ok(__Field::__field102),
                            b"NAD" => _serde::__private::Ok(__Field::__field103),
                            b"NGN" => _serde::__private::Ok(__Field::__field104),
                            b"NIO" => _serde::__private::Ok(__Field::__field105),
                            b"NOK" => _serde::__private::Ok(__Field::__field106),
                            b"NPR" => _serde::__private::Ok(__Field::__field107),
                            b"NZD" => _serde::__private::Ok(__Field::__field108),
                            b"OMR" => _serde::__private::Ok(__Field::__field109),
                            b"PAB" => _serde::__private::Ok(__Field::__field110),
                            b"PEN" => _serde::__private::Ok(__Field::__field111),
                            b"PGK" => _serde::__private::Ok(__Field::__field112),
                            b"PHP" => _serde::__private::Ok(__Field::__field113),
                            b"PKR" => _serde::__private::Ok(__Field::__field114),
                            b"PLN" => _serde::__private::Ok(__Field::__field115),
                            b"PYG" => _serde::__private::Ok(__Field::__field116),
                            b"QAR" => _serde::__private::Ok(__Field::__field117),
                            b"RON" => _serde::__private::Ok(__Field::__field118),
                            b"RSD" => _serde::__private::Ok(__Field::__field119),
                            b"RUB" => _serde::__private::Ok(__Field::__field120),
                            b"RWF" => _serde::__private::Ok(__Field::__field121),
                            b"SAR" => _serde::__private::Ok(__Field::__field122),
                            b"SBD" => _serde::__private::Ok(__Field::__field123),
                            b"SCR" => _serde::__private::Ok(__Field::__field124),
                            b"SDG" => _serde::__private::Ok(__Field::__field125),
                            b"SEK" => _serde::__private::Ok(__Field::__field126),
                            b"SGD" => _serde::__private::Ok(__Field::__field127),
                            b"SHP" => _serde::__private::Ok(__Field::__field128),
                            b"SLL" => _serde::__private::Ok(__Field::__field129),
                            b"SOS" => _serde::__private::Ok(__Field::__field130),
                            b"SRD" => _serde::__private::Ok(__Field::__field131),
                            b"SSP" => _serde::__private::Ok(__Field::__field132),
                            b"STN" => _serde::__private::Ok(__Field::__field133),
                            b"SVC" => _serde::__private::Ok(__Field::__field134),
                            b"SYP" => _serde::__private::Ok(__Field::__field135),
                            b"SZL" => _serde::__private::Ok(__Field::__field136),
                            b"THB" => _serde::__private::Ok(__Field::__field137),
                            b"TJS" => _serde::__private::Ok(__Field::__field138),
                            b"TMT" => _serde::__private::Ok(__Field::__field139),
                            b"TND" => _serde::__private::Ok(__Field::__field140),
                            b"TOP" => _serde::__private::Ok(__Field::__field141),
                            b"TRY" => _serde::__private::Ok(__Field::__field142),
                            b"TTD" => _serde::__private::Ok(__Field::__field143),
                            b"TWD" => _serde::__private::Ok(__Field::__field144),
                            b"TZS" => _serde::__private::Ok(__Field::__field145),
                            b"UAH" => _serde::__private::Ok(__Field::__field146),
                            b"UGX" => _serde::__private::Ok(__Field::__field147),
                            b"USD" => _serde::__private::Ok(__Field::__field148),
                            b"USN" => _serde::__private::Ok(__Field::__field149),
                            b"UYI" => _serde::__private::Ok(__Field::__field150),
                            b"UYU" => _serde::__private::Ok(__Field::__field151),
                            b"UYW" => _serde::__private::Ok(__Field::__field152),
                            b"UZS" => _serde::__private::Ok(__Field::__field153),
                            b"VED" => _serde::__private::Ok(__Field::__field154),
                            b"VES" => _serde::__private::Ok(__Field::__field155),
                            b"VND" => _serde::__private::Ok(__Field::__field156),
                            b"VUV" => _serde::__private::Ok(__Field::__field157),
                            b"WST" => _serde::__private::Ok(__Field::__field158),
                            b"XAF" => _serde::__private::Ok(__Field::__field159),
                            b"XAG" => _serde::__private::Ok(__Field::__field160),
                            b"XAU" => _serde::__private::Ok(__Field::__field161),
                            b"XBA" => _serde::__private::Ok(__Field::__field162),
                            b"XBB" => _serde::__private::Ok(__Field::__field163),
                            b"XBC" => _serde::__private::Ok(__Field::__field164),
                            b"XBD" => _serde::__private::Ok(__Field::__field165),
                            b"XCD" => _serde::__private::Ok(__Field::__field166),
                            b"XDR" => _serde::__private::Ok(__Field::__field167),
                            b"XOF" => _serde::__private::Ok(__Field::__field168),
                            b"XPD" => _serde::__private::Ok(__Field::__field169),
                            b"XPF" => _serde::__private::Ok(__Field::__field170),
                            b"XPT" => _serde::__private::Ok(__Field::__field171),
                            b"XSU" => _serde::__private::Ok(__Field::__field172),
                            b"XTS" => _serde::__private::Ok(__Field::__field173),
                            b"XUA" => _serde::__private::Ok(__Field::__field174),
                            b"XXX" => _serde::__private::Ok(__Field::__field175),
                            b"YER" => _serde::__private::Ok(__Field::__field176),
                            b"ZAR" => _serde::__private::Ok(__Field::__field177),
                            b"ZMW" => _serde::__private::Ok(__Field::__field178),
                            b"ZWL" => _serde::__private::Ok(__Field::__field179),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(_serde::de::Error::unknown_variant(
                                    __value, VARIANTS,
                                ))
                            }
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(__deserializer, __FieldVisitor)
                    }
                }
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<Currency>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = Currency;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter, "enum Currency")
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match match _serde::de::EnumAccess::variant(__data) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            (__Field::__field0, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::AED)
                            }
                            (__Field::__field1, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::AFN)
                            }
                            (__Field::__field2, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::ALL)
                            }
                            (__Field::__field3, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::AMD)
                            }
                            (__Field::__field4, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::ANG)
                            }
                            (__Field::__field5, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::AOA)
                            }
                            (__Field::__field6, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::ARS)
                            }
                            (__Field::__field7, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::AUD)
                            }
                            (__Field::__field8, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::AWG)
                            }
                            (__Field::__field9, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::AZN)
                            }
                            (__Field::__field10, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::BAM)
                            }
                            (__Field::__field11, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::BBD)
                            }
                            (__Field::__field12, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::BDT)
                            }
                            (__Field::__field13, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::BGN)
                            }
                            (__Field::__field14, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::BHD)
                            }
                            (__Field::__field15, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::BIF)
                            }
                            (__Field::__field16, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::BMD)
                            }
                            (__Field::__field17, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::BND)
                            }
                            (__Field::__field18, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::BOB)
                            }
                            (__Field::__field19, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::BOV)
                            }
                            (__Field::__field20, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::BRL)
                            }
                            (__Field::__field21, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::BSD)
                            }
                            (__Field::__field22, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::BTN)
                            }
                            (__Field::__field23, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::BWP)
                            }
                            (__Field::__field24, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::BYN)
                            }
                            (__Field::__field25, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::BZD)
                            }
                            (__Field::__field26, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::CAD)
                            }
                            (__Field::__field27, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::CDF)
                            }
                            (__Field::__field28, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::CHE)
                            }
                            (__Field::__field29, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::CHF)
                            }
                            (__Field::__field30, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::CHW)
                            }
                            (__Field::__field31, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::CLF)
                            }
                            (__Field::__field32, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::CLP)
                            }
                            (__Field::__field33, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::CNY)
                            }
                            (__Field::__field34, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::COP)
                            }
                            (__Field::__field35, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::COU)
                            }
                            (__Field::__field36, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::CRC)
                            }
                            (__Field::__field37, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::CUC)
                            }
                            (__Field::__field38, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::CUP)
                            }
                            (__Field::__field39, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::CVE)
                            }
                            (__Field::__field40, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::CZK)
                            }
                            (__Field::__field41, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::DJF)
                            }
                            (__Field::__field42, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::DKK)
                            }
                            (__Field::__field43, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::DOP)
                            }
                            (__Field::__field44, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::DZD)
                            }
                            (__Field::__field45, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::EGP)
                            }
                            (__Field::__field46, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::ERN)
                            }
                            (__Field::__field47, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::ETB)
                            }
                            (__Field::__field48, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::EUR)
                            }
                            (__Field::__field49, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::FJD)
                            }
                            (__Field::__field50, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::FKP)
                            }
                            (__Field::__field51, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::GBP)
                            }
                            (__Field::__field52, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::GEL)
                            }
                            (__Field::__field53, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::GHS)
                            }
                            (__Field::__field54, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::GIP)
                            }
                            (__Field::__field55, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::GMD)
                            }
                            (__Field::__field56, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::GNF)
                            }
                            (__Field::__field57, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::GTQ)
                            }
                            (__Field::__field58, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::GYD)
                            }
                            (__Field::__field59, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::HKD)
                            }
                            (__Field::__field60, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::HNL)
                            }
                            (__Field::__field61, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::HRK)
                            }
                            (__Field::__field62, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::HTG)
                            }
                            (__Field::__field63, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::HUF)
                            }
                            (__Field::__field64, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::IDR)
                            }
                            (__Field::__field65, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::ILS)
                            }
                            (__Field::__field66, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::INR)
                            }
                            (__Field::__field67, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::IQD)
                            }
                            (__Field::__field68, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::IRR)
                            }
                            (__Field::__field69, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::ISK)
                            }
                            (__Field::__field70, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::JMD)
                            }
                            (__Field::__field71, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::JOD)
                            }
                            (__Field::__field72, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::JPY)
                            }
                            (__Field::__field73, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::KES)
                            }
                            (__Field::__field74, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::KGS)
                            }
                            (__Field::__field75, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::KHR)
                            }
                            (__Field::__field76, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::KMF)
                            }
                            (__Field::__field77, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::KPW)
                            }
                            (__Field::__field78, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::KRW)
                            }
                            (__Field::__field79, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::KWD)
                            }
                            (__Field::__field80, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::KYD)
                            }
                            (__Field::__field81, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::KZT)
                            }
                            (__Field::__field82, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::LAK)
                            }
                            (__Field::__field83, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::LBP)
                            }
                            (__Field::__field84, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::LKR)
                            }
                            (__Field::__field85, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::LRD)
                            }
                            (__Field::__field86, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::LSL)
                            }
                            (__Field::__field87, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::LYD)
                            }
                            (__Field::__field88, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::MAD)
                            }
                            (__Field::__field89, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::MDL)
                            }
                            (__Field::__field90, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::MGA)
                            }
                            (__Field::__field91, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::MKD)
                            }
                            (__Field::__field92, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::MMK)
                            }
                            (__Field::__field93, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::MNT)
                            }
                            (__Field::__field94, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::MOP)
                            }
                            (__Field::__field95, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::MRU)
                            }
                            (__Field::__field96, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::MUR)
                            }
                            (__Field::__field97, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::MVR)
                            }
                            (__Field::__field98, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::MWK)
                            }
                            (__Field::__field99, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::MXN)
                            }
                            (__Field::__field100, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::MXV)
                            }
                            (__Field::__field101, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::MYR)
                            }
                            (__Field::__field102, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::MZN)
                            }
                            (__Field::__field103, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::NAD)
                            }
                            (__Field::__field104, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::NGN)
                            }
                            (__Field::__field105, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::NIO)
                            }
                            (__Field::__field106, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::NOK)
                            }
                            (__Field::__field107, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::NPR)
                            }
                            (__Field::__field108, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::NZD)
                            }
                            (__Field::__field109, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::OMR)
                            }
                            (__Field::__field110, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::PAB)
                            }
                            (__Field::__field111, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::PEN)
                            }
                            (__Field::__field112, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::PGK)
                            }
                            (__Field::__field113, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::PHP)
                            }
                            (__Field::__field114, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::PKR)
                            }
                            (__Field::__field115, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::PLN)
                            }
                            (__Field::__field116, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::PYG)
                            }
                            (__Field::__field117, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::QAR)
                            }
                            (__Field::__field118, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::RON)
                            }
                            (__Field::__field119, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::RSD)
                            }
                            (__Field::__field120, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::RUB)
                            }
                            (__Field::__field121, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::RWF)
                            }
                            (__Field::__field122, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::SAR)
                            }
                            (__Field::__field123, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::SBD)
                            }
                            (__Field::__field124, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::SCR)
                            }
                            (__Field::__field125, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::SDG)
                            }
                            (__Field::__field126, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::SEK)
                            }
                            (__Field::__field127, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::SGD)
                            }
                            (__Field::__field128, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::SHP)
                            }
                            (__Field::__field129, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::SLL)
                            }
                            (__Field::__field130, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::SOS)
                            }
                            (__Field::__field131, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::SRD)
                            }
                            (__Field::__field132, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::SSP)
                            }
                            (__Field::__field133, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::STN)
                            }
                            (__Field::__field134, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::SVC)
                            }
                            (__Field::__field135, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::SYP)
                            }
                            (__Field::__field136, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::SZL)
                            }
                            (__Field::__field137, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::THB)
                            }
                            (__Field::__field138, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::TJS)
                            }
                            (__Field::__field139, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::TMT)
                            }
                            (__Field::__field140, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::TND)
                            }
                            (__Field::__field141, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::TOP)
                            }
                            (__Field::__field142, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::TRY)
                            }
                            (__Field::__field143, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::TTD)
                            }
                            (__Field::__field144, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::TWD)
                            }
                            (__Field::__field145, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::TZS)
                            }
                            (__Field::__field146, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::UAH)
                            }
                            (__Field::__field147, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::UGX)
                            }
                            (__Field::__field148, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::USD)
                            }
                            (__Field::__field149, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::USN)
                            }
                            (__Field::__field150, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::UYI)
                            }
                            (__Field::__field151, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::UYU)
                            }
                            (__Field::__field152, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::UYW)
                            }
                            (__Field::__field153, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::UZS)
                            }
                            (__Field::__field154, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::VED)
                            }
                            (__Field::__field155, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::VES)
                            }
                            (__Field::__field156, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::VND)
                            }
                            (__Field::__field157, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::VUV)
                            }
                            (__Field::__field158, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::WST)
                            }
                            (__Field::__field159, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XAF)
                            }
                            (__Field::__field160, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XAG)
                            }
                            (__Field::__field161, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XAU)
                            }
                            (__Field::__field162, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XBA)
                            }
                            (__Field::__field163, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XBB)
                            }
                            (__Field::__field164, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XBC)
                            }
                            (__Field::__field165, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XBD)
                            }
                            (__Field::__field166, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XCD)
                            }
                            (__Field::__field167, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XDR)
                            }
                            (__Field::__field168, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XOF)
                            }
                            (__Field::__field169, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XPD)
                            }
                            (__Field::__field170, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XPF)
                            }
                            (__Field::__field171, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XPT)
                            }
                            (__Field::__field172, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XSU)
                            }
                            (__Field::__field173, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XTS)
                            }
                            (__Field::__field174, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XUA)
                            }
                            (__Field::__field175, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::XXX)
                            }
                            (__Field::__field176, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::YER)
                            }
                            (__Field::__field177, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::ZAR)
                            }
                            (__Field::__field178, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::ZMW)
                            }
                            (__Field::__field179, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(Currency::ZWL)
                            }
                        }
                    }
                }
                const VARIANTS: &'static [&'static str] = &[
                    "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM",
                    "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD",
                    "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP",
                    "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP",
                    "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP",
                    "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS",
                    "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF",
                    "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD",
                    "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK",
                    "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR",
                    "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB",
                    "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD",
                    "SSP", "STN", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY",
                    "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "UYI", "UYU", "UYW", "UZS",
                    "VED", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC",
                    "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX",
                    "YER", "ZAR", "ZMW", "ZWL",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "Currency",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Currency>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for Currency {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    Currency::AED => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        0u32,
                        "AED",
                    ),
                    Currency::AFN => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        1u32,
                        "AFN",
                    ),
                    Currency::ALL => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        2u32,
                        "ALL",
                    ),
                    Currency::AMD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        3u32,
                        "AMD",
                    ),
                    Currency::ANG => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        4u32,
                        "ANG",
                    ),
                    Currency::AOA => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        5u32,
                        "AOA",
                    ),
                    Currency::ARS => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        6u32,
                        "ARS",
                    ),
                    Currency::AUD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        7u32,
                        "AUD",
                    ),
                    Currency::AWG => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        8u32,
                        "AWG",
                    ),
                    Currency::AZN => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        9u32,
                        "AZN",
                    ),
                    Currency::BAM => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        10u32,
                        "BAM",
                    ),
                    Currency::BBD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        11u32,
                        "BBD",
                    ),
                    Currency::BDT => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        12u32,
                        "BDT",
                    ),
                    Currency::BGN => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        13u32,
                        "BGN",
                    ),
                    Currency::BHD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        14u32,
                        "BHD",
                    ),
                    Currency::BIF => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        15u32,
                        "BIF",
                    ),
                    Currency::BMD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        16u32,
                        "BMD",
                    ),
                    Currency::BND => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        17u32,
                        "BND",
                    ),
                    Currency::BOB => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        18u32,
                        "BOB",
                    ),
                    Currency::BOV => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        19u32,
                        "BOV",
                    ),
                    Currency::BRL => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        20u32,
                        "BRL",
                    ),
                    Currency::BSD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        21u32,
                        "BSD",
                    ),
                    Currency::BTN => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        22u32,
                        "BTN",
                    ),
                    Currency::BWP => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        23u32,
                        "BWP",
                    ),
                    Currency::BYN => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        24u32,
                        "BYN",
                    ),
                    Currency::BZD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        25u32,
                        "BZD",
                    ),
                    Currency::CAD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        26u32,
                        "CAD",
                    ),
                    Currency::CDF => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        27u32,
                        "CDF",
                    ),
                    Currency::CHE => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        28u32,
                        "CHE",
                    ),
                    Currency::CHF => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        29u32,
                        "CHF",
                    ),
                    Currency::CHW => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        30u32,
                        "CHW",
                    ),
                    Currency::CLF => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        31u32,
                        "CLF",
                    ),
                    Currency::CLP => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        32u32,
                        "CLP",
                    ),
                    Currency::CNY => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        33u32,
                        "CNY",
                    ),
                    Currency::COP => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        34u32,
                        "COP",
                    ),
                    Currency::COU => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        35u32,
                        "COU",
                    ),
                    Currency::CRC => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        36u32,
                        "CRC",
                    ),
                    Currency::CUC => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        37u32,
                        "CUC",
                    ),
                    Currency::CUP => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        38u32,
                        "CUP",
                    ),
                    Currency::CVE => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        39u32,
                        "CVE",
                    ),
                    Currency::CZK => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        40u32,
                        "CZK",
                    ),
                    Currency::DJF => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        41u32,
                        "DJF",
                    ),
                    Currency::DKK => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        42u32,
                        "DKK",
                    ),
                    Currency::DOP => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        43u32,
                        "DOP",
                    ),
                    Currency::DZD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        44u32,
                        "DZD",
                    ),
                    Currency::EGP => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        45u32,
                        "EGP",
                    ),
                    Currency::ERN => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        46u32,
                        "ERN",
                    ),
                    Currency::ETB => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        47u32,
                        "ETB",
                    ),
                    Currency::EUR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        48u32,
                        "EUR",
                    ),
                    Currency::FJD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        49u32,
                        "FJD",
                    ),
                    Currency::FKP => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        50u32,
                        "FKP",
                    ),
                    Currency::GBP => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        51u32,
                        "GBP",
                    ),
                    Currency::GEL => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        52u32,
                        "GEL",
                    ),
                    Currency::GHS => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        53u32,
                        "GHS",
                    ),
                    Currency::GIP => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        54u32,
                        "GIP",
                    ),
                    Currency::GMD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        55u32,
                        "GMD",
                    ),
                    Currency::GNF => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        56u32,
                        "GNF",
                    ),
                    Currency::GTQ => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        57u32,
                        "GTQ",
                    ),
                    Currency::GYD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        58u32,
                        "GYD",
                    ),
                    Currency::HKD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        59u32,
                        "HKD",
                    ),
                    Currency::HNL => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        60u32,
                        "HNL",
                    ),
                    Currency::HRK => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        61u32,
                        "HRK",
                    ),
                    Currency::HTG => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        62u32,
                        "HTG",
                    ),
                    Currency::HUF => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        63u32,
                        "HUF",
                    ),
                    Currency::IDR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        64u32,
                        "IDR",
                    ),
                    Currency::ILS => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        65u32,
                        "ILS",
                    ),
                    Currency::INR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        66u32,
                        "INR",
                    ),
                    Currency::IQD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        67u32,
                        "IQD",
                    ),
                    Currency::IRR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        68u32,
                        "IRR",
                    ),
                    Currency::ISK => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        69u32,
                        "ISK",
                    ),
                    Currency::JMD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        70u32,
                        "JMD",
                    ),
                    Currency::JOD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        71u32,
                        "JOD",
                    ),
                    Currency::JPY => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        72u32,
                        "JPY",
                    ),
                    Currency::KES => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        73u32,
                        "KES",
                    ),
                    Currency::KGS => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        74u32,
                        "KGS",
                    ),
                    Currency::KHR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        75u32,
                        "KHR",
                    ),
                    Currency::KMF => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        76u32,
                        "KMF",
                    ),
                    Currency::KPW => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        77u32,
                        "KPW",
                    ),
                    Currency::KRW => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        78u32,
                        "KRW",
                    ),
                    Currency::KWD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        79u32,
                        "KWD",
                    ),
                    Currency::KYD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        80u32,
                        "KYD",
                    ),
                    Currency::KZT => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        81u32,
                        "KZT",
                    ),
                    Currency::LAK => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        82u32,
                        "LAK",
                    ),
                    Currency::LBP => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        83u32,
                        "LBP",
                    ),
                    Currency::LKR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        84u32,
                        "LKR",
                    ),
                    Currency::LRD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        85u32,
                        "LRD",
                    ),
                    Currency::LSL => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        86u32,
                        "LSL",
                    ),
                    Currency::LYD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        87u32,
                        "LYD",
                    ),
                    Currency::MAD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        88u32,
                        "MAD",
                    ),
                    Currency::MDL => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        89u32,
                        "MDL",
                    ),
                    Currency::MGA => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        90u32,
                        "MGA",
                    ),
                    Currency::MKD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        91u32,
                        "MKD",
                    ),
                    Currency::MMK => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        92u32,
                        "MMK",
                    ),
                    Currency::MNT => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        93u32,
                        "MNT",
                    ),
                    Currency::MOP => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        94u32,
                        "MOP",
                    ),
                    Currency::MRU => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        95u32,
                        "MRU",
                    ),
                    Currency::MUR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        96u32,
                        "MUR",
                    ),
                    Currency::MVR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        97u32,
                        "MVR",
                    ),
                    Currency::MWK => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        98u32,
                        "MWK",
                    ),
                    Currency::MXN => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        99u32,
                        "MXN",
                    ),
                    Currency::MXV => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        100u32,
                        "MXV",
                    ),
                    Currency::MYR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        101u32,
                        "MYR",
                    ),
                    Currency::MZN => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        102u32,
                        "MZN",
                    ),
                    Currency::NAD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        103u32,
                        "NAD",
                    ),
                    Currency::NGN => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        104u32,
                        "NGN",
                    ),
                    Currency::NIO => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        105u32,
                        "NIO",
                    ),
                    Currency::NOK => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        106u32,
                        "NOK",
                    ),
                    Currency::NPR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        107u32,
                        "NPR",
                    ),
                    Currency::NZD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        108u32,
                        "NZD",
                    ),
                    Currency::OMR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        109u32,
                        "OMR",
                    ),
                    Currency::PAB => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        110u32,
                        "PAB",
                    ),
                    Currency::PEN => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        111u32,
                        "PEN",
                    ),
                    Currency::PGK => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        112u32,
                        "PGK",
                    ),
                    Currency::PHP => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        113u32,
                        "PHP",
                    ),
                    Currency::PKR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        114u32,
                        "PKR",
                    ),
                    Currency::PLN => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        115u32,
                        "PLN",
                    ),
                    Currency::PYG => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        116u32,
                        "PYG",
                    ),
                    Currency::QAR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        117u32,
                        "QAR",
                    ),
                    Currency::RON => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        118u32,
                        "RON",
                    ),
                    Currency::RSD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        119u32,
                        "RSD",
                    ),
                    Currency::RUB => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        120u32,
                        "RUB",
                    ),
                    Currency::RWF => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        121u32,
                        "RWF",
                    ),
                    Currency::SAR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        122u32,
                        "SAR",
                    ),
                    Currency::SBD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        123u32,
                        "SBD",
                    ),
                    Currency::SCR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        124u32,
                        "SCR",
                    ),
                    Currency::SDG => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        125u32,
                        "SDG",
                    ),
                    Currency::SEK => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        126u32,
                        "SEK",
                    ),
                    Currency::SGD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        127u32,
                        "SGD",
                    ),
                    Currency::SHP => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        128u32,
                        "SHP",
                    ),
                    Currency::SLL => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        129u32,
                        "SLL",
                    ),
                    Currency::SOS => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        130u32,
                        "SOS",
                    ),
                    Currency::SRD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        131u32,
                        "SRD",
                    ),
                    Currency::SSP => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        132u32,
                        "SSP",
                    ),
                    Currency::STN => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        133u32,
                        "STN",
                    ),
                    Currency::SVC => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        134u32,
                        "SVC",
                    ),
                    Currency::SYP => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        135u32,
                        "SYP",
                    ),
                    Currency::SZL => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        136u32,
                        "SZL",
                    ),
                    Currency::THB => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        137u32,
                        "THB",
                    ),
                    Currency::TJS => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        138u32,
                        "TJS",
                    ),
                    Currency::TMT => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        139u32,
                        "TMT",
                    ),
                    Currency::TND => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        140u32,
                        "TND",
                    ),
                    Currency::TOP => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        141u32,
                        "TOP",
                    ),
                    Currency::TRY => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        142u32,
                        "TRY",
                    ),
                    Currency::TTD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        143u32,
                        "TTD",
                    ),
                    Currency::TWD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        144u32,
                        "TWD",
                    ),
                    Currency::TZS => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        145u32,
                        "TZS",
                    ),
                    Currency::UAH => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        146u32,
                        "UAH",
                    ),
                    Currency::UGX => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        147u32,
                        "UGX",
                    ),
                    Currency::USD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        148u32,
                        "USD",
                    ),
                    Currency::USN => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        149u32,
                        "USN",
                    ),
                    Currency::UYI => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        150u32,
                        "UYI",
                    ),
                    Currency::UYU => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        151u32,
                        "UYU",
                    ),
                    Currency::UYW => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        152u32,
                        "UYW",
                    ),
                    Currency::UZS => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        153u32,
                        "UZS",
                    ),
                    Currency::VED => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        154u32,
                        "VED",
                    ),
                    Currency::VES => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        155u32,
                        "VES",
                    ),
                    Currency::VND => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        156u32,
                        "VND",
                    ),
                    Currency::VUV => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        157u32,
                        "VUV",
                    ),
                    Currency::WST => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        158u32,
                        "WST",
                    ),
                    Currency::XAF => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        159u32,
                        "XAF",
                    ),
                    Currency::XAG => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        160u32,
                        "XAG",
                    ),
                    Currency::XAU => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        161u32,
                        "XAU",
                    ),
                    Currency::XBA => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        162u32,
                        "XBA",
                    ),
                    Currency::XBB => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        163u32,
                        "XBB",
                    ),
                    Currency::XBC => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        164u32,
                        "XBC",
                    ),
                    Currency::XBD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        165u32,
                        "XBD",
                    ),
                    Currency::XCD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        166u32,
                        "XCD",
                    ),
                    Currency::XDR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        167u32,
                        "XDR",
                    ),
                    Currency::XOF => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        168u32,
                        "XOF",
                    ),
                    Currency::XPD => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        169u32,
                        "XPD",
                    ),
                    Currency::XPF => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        170u32,
                        "XPF",
                    ),
                    Currency::XPT => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        171u32,
                        "XPT",
                    ),
                    Currency::XSU => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        172u32,
                        "XSU",
                    ),
                    Currency::XTS => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        173u32,
                        "XTS",
                    ),
                    Currency::XUA => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        174u32,
                        "XUA",
                    ),
                    Currency::XXX => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        175u32,
                        "XXX",
                    ),
                    Currency::YER => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        176u32,
                        "YER",
                    ),
                    Currency::ZAR => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        177u32,
                        "ZAR",
                    ),
                    Currency::ZMW => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        178u32,
                        "ZMW",
                    ),
                    Currency::ZWL => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "Currency",
                        179u32,
                        "ZWL",
                    ),
                }
            }
        }
    };
    /// Maximum content length of an onboarding request.
    pub const FORM_DATA_LENGTH_LIMIT: u64 = 1024 * 1024 + BASE64_ENCODED_IMAGE_SIZE_LIMIT;
    /// Maximum size of an uploaded image when encoded in base64.
    const BASE64_ENCODED_IMAGE_SIZE_LIMIT: u64 = IMAGE_SIZE_LIMIT * 4 / 3 + 1;
    /// Maximum size of an uploaded image.
    /// 8MB
    const IMAGE_SIZE_LIMIT: u64 = 8 * 1024 * 1024;
    /// Maximum dimensions of an uploaded image.
    const IMAGE_DIMENSION_LIMIT: u32 = 10000;
}
pub mod error {
    //! Error types.
    use axum::response::{IntoResponse, Response};
    use reqwest::StatusCode;
    pub type GlobeliseResult<T> = std::result::Result<T, GlobeliseError>;
    /// Error responses.
    pub enum GlobeliseError {
        Dapr(String),
        Database(String),
        UnavailableEmail,
        WrongUserType,
        UnsupportedImageFormat,
        BadRequest(String),
        Unauthorized(String),
        Forbidden,
        #[allow(dead_code)]
        NotFound,
        PayloadTooLarge(String),
        Internal(String),
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for GlobeliseError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match (&*self,) {
                (&GlobeliseError::Dapr(ref __self_0),) => {
                    let debug_trait_builder = &mut ::core::fmt::Formatter::debug_tuple(f, "Dapr");
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_0));
                    ::core::fmt::DebugTuple::finish(debug_trait_builder)
                }
                (&GlobeliseError::Database(ref __self_0),) => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_tuple(f, "Database");
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_0));
                    ::core::fmt::DebugTuple::finish(debug_trait_builder)
                }
                (&GlobeliseError::UnavailableEmail,) => {
                    ::core::fmt::Formatter::write_str(f, "UnavailableEmail")
                }
                (&GlobeliseError::WrongUserType,) => {
                    ::core::fmt::Formatter::write_str(f, "WrongUserType")
                }
                (&GlobeliseError::UnsupportedImageFormat,) => {
                    ::core::fmt::Formatter::write_str(f, "UnsupportedImageFormat")
                }
                (&GlobeliseError::BadRequest(ref __self_0),) => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_tuple(f, "BadRequest");
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_0));
                    ::core::fmt::DebugTuple::finish(debug_trait_builder)
                }
                (&GlobeliseError::Unauthorized(ref __self_0),) => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_tuple(f, "Unauthorized");
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_0));
                    ::core::fmt::DebugTuple::finish(debug_trait_builder)
                }
                (&GlobeliseError::Forbidden,) => ::core::fmt::Formatter::write_str(f, "Forbidden"),
                (&GlobeliseError::NotFound,) => ::core::fmt::Formatter::write_str(f, "NotFound"),
                (&GlobeliseError::PayloadTooLarge(ref __self_0),) => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_tuple(f, "PayloadTooLarge");
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_0));
                    ::core::fmt::DebugTuple::finish(debug_trait_builder)
                }
                (&GlobeliseError::Internal(ref __self_0),) => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_tuple(f, "Internal");
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_0));
                    ::core::fmt::DebugTuple::finish(debug_trait_builder)
                }
            }
        }
    }
    impl GlobeliseError {
        pub fn internal<S>(s: S) -> GlobeliseError
        where
            S: ToString,
        {
            GlobeliseError::Internal(s.to_string())
        }
        pub fn bad_request<S>(s: S) -> GlobeliseError
        where
            S: ToString,
        {
            GlobeliseError::BadRequest(s.to_string())
        }
        pub fn unauthorized<S>(s: S) -> GlobeliseError
        where
            S: ToString,
        {
            GlobeliseError::Unauthorized(s.to_string())
        }
        pub fn payload_too_large<S>(s: S) -> GlobeliseError
        where
            S: ToString,
        {
            GlobeliseError::PayloadTooLarge(s.to_string())
        }
        pub fn dapr<S>(s: S) -> GlobeliseError
        where
            S: ToString,
        {
            GlobeliseError::Dapr(s.to_string())
        }
    }
    impl IntoResponse for GlobeliseError {
        fn into_response(self) -> Response {
            match self {
                GlobeliseError::Dapr(message) => {
                    #[cfg(debug_assertions)]
                    return (StatusCode::INTERNAL_SERVER_ERROR, message).into_response();
                }
                GlobeliseError::Database(message) => {
                    #[cfg(debug_assertions)]
                    return (StatusCode::INTERNAL_SERVER_ERROR, message).into_response();
                }
                GlobeliseError::UnavailableEmail => {
                    #[cfg(debug_assertions)]
                    return (StatusCode::UNPROCESSABLE_ENTITY, "Email is unavailable")
                        .into_response();
                }
                GlobeliseError::WrongUserType => {
                    #[cfg(debug_assertions)]
                    return (StatusCode::UNAUTHORIZED, "Wrong user type").into_response();
                }
                GlobeliseError::UnsupportedImageFormat => {
                    #[cfg(debug_assertions)]
                    return (
                        StatusCode::UNSUPPORTED_MEDIA_TYPE,
                        "Image must be PNG or JPEG",
                    )
                        .into_response();
                }
                GlobeliseError::BadRequest(message) => {
                    #[cfg(debug_assertions)]
                    return (StatusCode::BAD_REQUEST, message).into_response();
                }
                GlobeliseError::Unauthorized(message) => {
                    #[cfg(debug_assertions)]
                    return (StatusCode::UNAUTHORIZED, message).into_response();
                }
                GlobeliseError::Forbidden => {
                    #[cfg(debug_assertions)]
                    return StatusCode::FORBIDDEN.into_response();
                }
                GlobeliseError::NotFound => {
                    #[cfg(debug_assertions)]
                    return StatusCode::NOT_FOUND.into_response();
                }
                GlobeliseError::PayloadTooLarge(message) => {
                    #[cfg(debug_assertions)]
                    return (StatusCode::PAYLOAD_TOO_LARGE, message).into_response();
                }
                GlobeliseError::Internal(message) => {
                    #[cfg(debug_assertions)]
                    return (StatusCode::INTERNAL_SERVER_ERROR, message).into_response();
                }
            }
        }
    }
    impl std::fmt::Display for GlobeliseError {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                GlobeliseError::UnsupportedImageFormat => f.write_fmt(
                    ::core::fmt::Arguments::new_v1(&["Image must be PNG or JPEG"], &[]),
                ),
                GlobeliseError::BadRequest(message) => f.write_fmt(::core::fmt::Arguments::new_v1(
                    &[""],
                    &[::core::fmt::ArgumentV1::new_display(&message)],
                )),
                GlobeliseError::PayloadTooLarge(message) => {
                    f.write_fmt(::core::fmt::Arguments::new_v1(
                        &[""],
                        &[::core::fmt::ArgumentV1::new_display(&message)],
                    ))
                }
                GlobeliseError::Internal(_) => {
                    f.write_fmt(::core::fmt::Arguments::new_v1(&["Internal error"], &[]))
                }
                _ => f.write_fmt(::core::fmt::Arguments::new_v1_formatted(
                    &["", "\n"],
                    &[::core::fmt::ArgumentV1::new_debug(&self)],
                    &[::core::fmt::rt::v1::Argument {
                        position: 0usize,
                        format: ::core::fmt::rt::v1::FormatSpec {
                            fill: ' ',
                            align: ::core::fmt::rt::v1::Alignment::Unknown,
                            flags: 4u32,
                            precision: ::core::fmt::rt::v1::Count::Implied,
                            width: ::core::fmt::rt::v1::Count::Implied,
                        },
                    }],
                    unsafe { ::core::fmt::UnsafeArg::new() },
                )),
            }
        }
    }
    impl<T> From<T> for GlobeliseError
    where
        T: std::error::Error,
    {
        fn from(e: T) -> Self {
            GlobeliseError::internal({
                let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1_formatted(
                    &[""],
                    &[::core::fmt::ArgumentV1::new_debug(&e)],
                    &[::core::fmt::rt::v1::Argument {
                        position: 0usize,
                        format: ::core::fmt::rt::v1::FormatSpec {
                            fill: ' ',
                            align: ::core::fmt::rt::v1::Alignment::Unknown,
                            flags: 4u32,
                            precision: ::core::fmt::rt::v1::Count::Implied,
                            width: ::core::fmt::rt::v1::Count::Implied,
                        },
                    }],
                    unsafe { ::core::fmt::UnsafeArg::new() },
                ));
                res
            })
        }
    }
}
pub mod pubsub {
    use std::{collections::HashMap, sync::Arc};
    use axum::http::{HeaderMap, HeaderValue};
    use reqwest::{Client, StatusCode};
    use serde::{Deserialize, Serialize};
    use serde_with::{serde_as, TryFromInto};
    use tokio::sync::Mutex;
    use uuid::Uuid;
    use crate::{
        custom_serde::{Currency, DateWrapper},
        error::{GlobeliseError, GlobeliseResult},
    };
    pub const GLOBELISE_PUBSUB_TOPIC_ID: &str = "globelise-pubsub";
    /// There should be its equivalent exposed in DAPR SDK themselves.
    /// Reference struct `TopicSubscription` from dapr/proto/runtime/v1/appcallback.proto)
    /// from the DAPR protobuf
    pub struct TopicSubscription {
        #[serde(rename = "pubsubname")]
        pub pubsub_name: &'static str,
        pub topic: String,
        pub route: String,
        pub metadata: HashMap<String, String>,
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for TopicSubscription {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "TopicSubscription",
                    false as usize + 1 + 1 + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "pubsubname",
                    &self.pubsub_name,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "topic",
                    &self.topic,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "route",
                    &self.route,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "metadata",
                    &self.metadata,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Deserialize<'static> for TopicSubscription {
            fn deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'static>,
            {
                #[allow(non_camel_case_types)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __ignore,
                }
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter, "field identifier")
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "pubsubname" => _serde::__private::Ok(__Field::__field0),
                            "topic" => _serde::__private::Ok(__Field::__field1),
                            "route" => _serde::__private::Ok(__Field::__field2),
                            "metadata" => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"pubsubname" => _serde::__private::Ok(__Field::__field0),
                            b"topic" => _serde::__private::Ok(__Field::__field1),
                            b"route" => _serde::__private::Ok(__Field::__field2),
                            b"metadata" => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(__deserializer, __FieldVisitor)
                    }
                }
                struct __Visitor {
                    marker: _serde::__private::PhantomData<TopicSubscription>,
                    lifetime: _serde::__private::PhantomData<&'static ()>,
                }
                impl _serde::de::Visitor<'static> for __Visitor {
                    type Value = TopicSubscription;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct TopicSubscription",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'static>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<&'static str>(
                            &mut __seq,
                        ) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(_serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct TopicSubscription with 4 elements",
                                ));
                            }
                        };
                        let __field1 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct TopicSubscription with 4 elements",
                                        ),
                                    );
                                }
                            };
                        let __field2 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct TopicSubscription with 4 elements",
                                        ),
                                    );
                                }
                            };
                        let __field3 = match match _serde::de::SeqAccess::next_element::<
                            HashMap<String, String>,
                        >(&mut __seq)
                        {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(_serde::de::Error::invalid_length(
                                    3usize,
                                    &"struct TopicSubscription with 4 elements",
                                ));
                            }
                        };
                        _serde::__private::Ok(TopicSubscription {
                            pubsub_name: __field0,
                            topic: __field1,
                            route: __field2,
                            metadata: __field3,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'static>,
                    {
                        let mut __field0: _serde::__private::Option<&'static str> =
                            _serde::__private::None;
                        let mut __field1: _serde::__private::Option<String> =
                            _serde::__private::None;
                        let mut __field2: _serde::__private::Option<String> =
                            _serde::__private::None;
                        let mut __field3: _serde::__private::Option<HashMap<String, String>> =
                            _serde::__private::None;
                        while let _serde::__private::Some(__key) =
                            match _serde::de::MapAccess::next_key::<__Field>(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            }
                        {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "pubsubname",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<&'static str>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "topic",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "route",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "metadata",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            HashMap<String, String>,
                                        >(&mut __map)
                                        {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)
                                    {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("pubsubname") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("topic") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("route") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("metadata") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(TopicSubscription {
                            pubsub_name: __field0,
                            topic: __field1,
                            route: __field2,
                            metadata: __field3,
                        })
                    }
                }
                const FIELDS: &'static [&'static str] =
                    &["pubsubname", "topic", "route", "metadata"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "TopicSubscription",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<TopicSubscription>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    /// All DAPR subscriber events will come in this form.
    /// Reference struct 'TopicEventRequest` from dapr/proto/runtime/v1/appcallback.proto
    /// from the DAPR protobuf
    /// TODO: Make some of these enums so we can type-check better.
    ///       It will also reduce allocations.
    pub struct TopicSubscriberEvent<T>
    where
        T: PubSubData,
    {
        pub data: T,
        #[serde(rename = "datacontenttype")]
        pub content_type: String,
        pub id: String,
        #[serde(rename = "pubsubname")]
        pub pubsub_name: String,
        pub source: String,
        #[serde(rename = "specversion")]
        pub spec_version: String,
        pub topic: TopicId,
        #[serde(rename = "traceid")]
        pub trace_id: String,
        #[serde(rename = "tracestate")]
        pub trace_state: String,
        #[serde(rename = "type")]
        pub event_type: String,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl<T: ::core::fmt::Debug> ::core::fmt::Debug for TopicSubscriberEvent<T>
    where
        T: PubSubData,
    {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                TopicSubscriberEvent {
                    data: ref __self_0_0,
                    content_type: ref __self_0_1,
                    id: ref __self_0_2,
                    pubsub_name: ref __self_0_3,
                    source: ref __self_0_4,
                    spec_version: ref __self_0_5,
                    topic: ref __self_0_6,
                    trace_id: ref __self_0_7,
                    trace_state: ref __self_0_8,
                    event_type: ref __self_0_9,
                } => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_struct(f, "TopicSubscriberEvent");
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "data",
                        &&(*__self_0_0),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "content_type",
                        &&(*__self_0_1),
                    );
                    let _ =
                        ::core::fmt::DebugStruct::field(debug_trait_builder, "id", &&(*__self_0_2));
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "pubsub_name",
                        &&(*__self_0_3),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "source",
                        &&(*__self_0_4),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "spec_version",
                        &&(*__self_0_5),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "topic",
                        &&(*__self_0_6),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "trace_id",
                        &&(*__self_0_7),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "trace_state",
                        &&(*__self_0_8),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "event_type",
                        &&(*__self_0_9),
                    );
                    ::core::fmt::DebugStruct::finish(debug_trait_builder)
                }
            }
        }
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de, T> _serde::Deserialize<'de> for TopicSubscriberEvent<T>
        where
            T: PubSubData,
            T: _serde::Deserialize<'de>,
        {
            fn deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __ignore,
                }
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter, "field identifier")
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "data" => _serde::__private::Ok(__Field::__field0),
                            "datacontenttype" => _serde::__private::Ok(__Field::__field1),
                            "id" => _serde::__private::Ok(__Field::__field2),
                            "pubsubname" => _serde::__private::Ok(__Field::__field3),
                            "source" => _serde::__private::Ok(__Field::__field4),
                            "specversion" => _serde::__private::Ok(__Field::__field5),
                            "topic" => _serde::__private::Ok(__Field::__field6),
                            "traceid" => _serde::__private::Ok(__Field::__field7),
                            "tracestate" => _serde::__private::Ok(__Field::__field8),
                            "type" => _serde::__private::Ok(__Field::__field9),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"data" => _serde::__private::Ok(__Field::__field0),
                            b"datacontenttype" => _serde::__private::Ok(__Field::__field1),
                            b"id" => _serde::__private::Ok(__Field::__field2),
                            b"pubsubname" => _serde::__private::Ok(__Field::__field3),
                            b"source" => _serde::__private::Ok(__Field::__field4),
                            b"specversion" => _serde::__private::Ok(__Field::__field5),
                            b"topic" => _serde::__private::Ok(__Field::__field6),
                            b"traceid" => _serde::__private::Ok(__Field::__field7),
                            b"tracestate" => _serde::__private::Ok(__Field::__field8),
                            b"type" => _serde::__private::Ok(__Field::__field9),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(__deserializer, __FieldVisitor)
                    }
                }
                struct __Visitor<'de, T>
                where
                    T: PubSubData,
                    T: _serde::Deserialize<'de>,
                {
                    marker: _serde::__private::PhantomData<TopicSubscriberEvent<T>>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de, T> _serde::de::Visitor<'de> for __Visitor<'de, T>
                where
                    T: PubSubData,
                    T: _serde::Deserialize<'de>,
                {
                    type Value = TopicSubscriberEvent<T>;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct TopicSubscriberEvent",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 =
                            match match _serde::de::SeqAccess::next_element::<T>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct TopicSubscriberEvent with 10 elements",
                                        ),
                                    );
                                }
                            };
                        let __field1 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct TopicSubscriberEvent with 10 elements",
                                        ),
                                    );
                                }
                            };
                        let __field2 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct TopicSubscriberEvent with 10 elements",
                                        ),
                                    );
                                }
                            };
                        let __field3 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct TopicSubscriberEvent with 10 elements",
                                        ),
                                    );
                                }
                            };
                        let __field4 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct TopicSubscriberEvent with 10 elements",
                                        ),
                                    );
                                }
                            };
                        let __field5 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct TopicSubscriberEvent with 10 elements",
                                        ),
                                    );
                                }
                            };
                        let __field6 = match match _serde::de::SeqAccess::next_element::<TopicId>(
                            &mut __seq,
                        ) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(_serde::de::Error::invalid_length(
                                    6usize,
                                    &"struct TopicSubscriberEvent with 10 elements",
                                ));
                            }
                        };
                        let __field7 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            7usize,
                                            &"struct TopicSubscriberEvent with 10 elements",
                                        ),
                                    );
                                }
                            };
                        let __field8 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            8usize,
                                            &"struct TopicSubscriberEvent with 10 elements",
                                        ),
                                    );
                                }
                            };
                        let __field9 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            9usize,
                                            &"struct TopicSubscriberEvent with 10 elements",
                                        ),
                                    );
                                }
                            };
                        _serde::__private::Ok(TopicSubscriberEvent {
                            data: __field0,
                            content_type: __field1,
                            id: __field2,
                            pubsub_name: __field3,
                            source: __field4,
                            spec_version: __field5,
                            topic: __field6,
                            trace_id: __field7,
                            trace_state: __field8,
                            event_type: __field9,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<String> =
                            _serde::__private::None;
                        let mut __field2: _serde::__private::Option<String> =
                            _serde::__private::None;
                        let mut __field3: _serde::__private::Option<String> =
                            _serde::__private::None;
                        let mut __field4: _serde::__private::Option<String> =
                            _serde::__private::None;
                        let mut __field5: _serde::__private::Option<String> =
                            _serde::__private::None;
                        let mut __field6: _serde::__private::Option<TopicId> =
                            _serde::__private::None;
                        let mut __field7: _serde::__private::Option<String> =
                            _serde::__private::None;
                        let mut __field8: _serde::__private::Option<String> =
                            _serde::__private::None;
                        let mut __field9: _serde::__private::Option<String> =
                            _serde::__private::None;
                        while let _serde::__private::Some(__key) =
                            match _serde::de::MapAccess::next_key::<__Field>(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            }
                        {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "data",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "datacontenttype",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "id",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "pubsubname",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "source",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "specversion",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "topic",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<TopicId>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "traceid",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "tracestate",
                                            ),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "type",
                                            ),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)
                                    {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("data") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("datacontenttype") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("id") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("pubsubname") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("source") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("specversion") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("topic") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("traceid") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("tracestate") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("type") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(TopicSubscriberEvent {
                            data: __field0,
                            content_type: __field1,
                            id: __field2,
                            pubsub_name: __field3,
                            source: __field4,
                            spec_version: __field5,
                            topic: __field6,
                            trace_id: __field7,
                            trace_state: __field8,
                            event_type: __field9,
                        })
                    }
                }
                const FIELDS: &'static [&'static str] = &[
                    "data",
                    "datacontenttype",
                    "id",
                    "pubsubname",
                    "source",
                    "specversion",
                    "topic",
                    "traceid",
                    "tracestate",
                    "type",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "TopicSubscriberEvent",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<TopicSubscriberEvent<T>>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    pub struct PubSub(Client, String);
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for PubSub {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                PubSub(ref __self_0_0, ref __self_0_1) => {
                    let debug_trait_builder = &mut ::core::fmt::Formatter::debug_tuple(f, "PubSub");
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_0_0));
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_0_1));
                    ::core::fmt::DebugTuple::finish(debug_trait_builder)
                }
            }
        }
    }
    pub type SharedPubSub = Arc<Mutex<PubSub>>;
    impl PubSub {
        pub fn new(reqwest_client: Client, dapr_address: String) -> Self {
            PubSub(reqwest_client, dapr_address)
        }
        /// TODO: Use a custom error type for this because DAPR only exposes certain error codes.
        pub async fn publish_event<T>(&self, data: T) -> GlobeliseResult<()>
        where
            T: PubSubData + Serialize,
        {
            let response = self
                .0
                .post({
                    let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                        &["", "/v1.0/publish/", "/"],
                        &[
                            ::core::fmt::ArgumentV1::new_display(&self.1),
                            ::core::fmt::ArgumentV1::new_display(&GLOBELISE_PUBSUB_TOPIC_ID),
                            ::core::fmt::ArgumentV1::new_display(&T::as_topic_id().as_str()),
                        ],
                    ));
                    res
                })
                .headers({
                    let mut headers = HeaderMap::new();
                    headers.insert("Content-Type", HeaderValue::from_static("application/json"));
                    headers
                })
                .json(&data)
                .send()
                .await?;
            match response.status() {
                StatusCode::OK | StatusCode::NO_CONTENT => Ok(()),
                _ => Err(GlobeliseError::internal(response.text().await?)),
            }
        }
    }
    pub enum TopicId {
        #[serde(rename = "add-client-contractor-pair")]
        UpdateClientContractorPair,
        #[serde(rename = "update-user-name")]
        UpdateUserName,
        #[serde(rename = "create-or-update-contracts")]
        CreateOrUpdateContracts,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for TopicId {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match (&*self,) {
                (&TopicId::UpdateClientContractorPair,) => {
                    ::core::fmt::Formatter::write_str(f, "UpdateClientContractorPair")
                }
                (&TopicId::UpdateUserName,) => {
                    ::core::fmt::Formatter::write_str(f, "UpdateUserName")
                }
                (&TopicId::CreateOrUpdateContracts,) => {
                    ::core::fmt::Formatter::write_str(f, "CreateOrUpdateContracts")
                }
            }
        }
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for TopicId {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    TopicId::UpdateClientContractorPair => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "TopicId",
                            0u32,
                            "add-client-contractor-pair",
                        )
                    }
                    TopicId::UpdateUserName => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "TopicId",
                        1u32,
                        "update-user-name",
                    ),
                    TopicId::CreateOrUpdateContracts => _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "TopicId",
                        2u32,
                        "create-or-update-contracts",
                    ),
                }
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for TopicId {
            fn deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                }
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter, "variant identifier")
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Err(_serde::de::Error::invalid_value(
                                _serde::de::Unexpected::Unsigned(__value),
                                &"variant index 0 <= i < 3",
                            )),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "add-client-contractor-pair" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            "update-user-name" => _serde::__private::Ok(__Field::__field1),
                            "create-or-update-contracts" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            _ => _serde::__private::Err(_serde::de::Error::unknown_variant(
                                __value, VARIANTS,
                            )),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"add-client-contractor-pair" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"update-user-name" => _serde::__private::Ok(__Field::__field1),
                            b"create-or-update-contracts" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(_serde::de::Error::unknown_variant(
                                    __value, VARIANTS,
                                ))
                            }
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(__deserializer, __FieldVisitor)
                    }
                }
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<TopicId>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = TopicId;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter, "enum TopicId")
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match match _serde::de::EnumAccess::variant(__data) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            (__Field::__field0, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(TopicId::UpdateClientContractorPair)
                            }
                            (__Field::__field1, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(TopicId::UpdateUserName)
                            }
                            (__Field::__field2, __variant) => {
                                match _serde::de::VariantAccess::unit_variant(__variant) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                                _serde::__private::Ok(TopicId::CreateOrUpdateContracts)
                            }
                        }
                    }
                }
                const VARIANTS: &'static [&'static str] = &[
                    "add-client-contractor-pair",
                    "update-user-name",
                    "create-or-update-contracts",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "TopicId",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<TopicId>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    impl TopicId {
        pub fn as_str(&self) -> &'static str {
            match self {
                TopicId::UpdateClientContractorPair => "add-client-contractor-pair",
                TopicId::UpdateUserName => "update-user-name",
                TopicId::CreateOrUpdateContracts => "create-or-update-contracts",
            }
        }
    }
    pub struct AddClientContractorPair {
        pub client_ulid: Uuid,
        pub contractor_ulid: Uuid,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for AddClientContractorPair {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                AddClientContractorPair {
                    client_ulid: ref __self_0_0,
                    contractor_ulid: ref __self_0_1,
                } => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_struct(f, "AddClientContractorPair");
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "client_ulid",
                        &&(*__self_0_0),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "contractor_ulid",
                        &&(*__self_0_1),
                    );
                    ::core::fmt::DebugStruct::finish(debug_trait_builder)
                }
            }
        }
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for AddClientContractorPair {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "AddClientContractorPair",
                    false as usize + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "client_ulid",
                    &self.client_ulid,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "contractor_ulid",
                    &self.contractor_ulid,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for AddClientContractorPair {
            fn deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                enum __Field {
                    __field0,
                    __field1,
                    __ignore,
                }
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter, "field identifier")
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "client_ulid" => _serde::__private::Ok(__Field::__field0),
                            "contractor_ulid" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"client_ulid" => _serde::__private::Ok(__Field::__field0),
                            b"contractor_ulid" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(__deserializer, __FieldVisitor)
                    }
                }
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<AddClientContractorPair>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = AddClientContractorPair;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct AddClientContractorPair",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 =
                            match match _serde::de::SeqAccess::next_element::<Uuid>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct AddClientContractorPair with 2 elements",
                                        ),
                                    );
                                }
                            };
                        let __field1 =
                            match match _serde::de::SeqAccess::next_element::<Uuid>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct AddClientContractorPair with 2 elements",
                                        ),
                                    );
                                }
                            };
                        _serde::__private::Ok(AddClientContractorPair {
                            client_ulid: __field0,
                            contractor_ulid: __field1,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<Uuid> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<Uuid> = _serde::__private::None;
                        while let _serde::__private::Some(__key) =
                            match _serde::de::MapAccess::next_key::<__Field>(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            }
                        {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "client_ulid",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<Uuid>(&mut __map)
                                        {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "contractor_ulid",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<Uuid>(&mut __map)
                                        {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)
                                    {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("client_ulid") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("contractor_ulid") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(AddClientContractorPair {
                            client_ulid: __field0,
                            contractor_ulid: __field1,
                        })
                    }
                }
                const FIELDS: &'static [&'static str] = &["client_ulid", "contractor_ulid"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "AddClientContractorPair",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<AddClientContractorPair>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    impl PubSubData for AddClientContractorPair {
        fn as_topic_id() -> TopicId {
            TopicId::UpdateClientContractorPair
        }
    }
    pub enum UpdateUserName {
        Client(Uuid, String),
        Contractor(Uuid, String),
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for UpdateUserName {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match (&*self,) {
                (&UpdateUserName::Client(ref __self_0, ref __self_1),) => {
                    let debug_trait_builder = &mut ::core::fmt::Formatter::debug_tuple(f, "Client");
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_0));
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_1));
                    ::core::fmt::DebugTuple::finish(debug_trait_builder)
                }
                (&UpdateUserName::Contractor(ref __self_0, ref __self_1),) => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_tuple(f, "Contractor");
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_0));
                    let _ = ::core::fmt::DebugTuple::field(debug_trait_builder, &&(*__self_1));
                    ::core::fmt::DebugTuple::finish(debug_trait_builder)
                }
            }
        }
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for UpdateUserName {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    UpdateUserName::Client(ref __field0, ref __field1) => {
                        let mut __serde_state = match _serde::Serializer::serialize_tuple_variant(
                            __serializer,
                            "UpdateUserName",
                            0u32,
                            "Client",
                            0 + 1 + 1,
                        ) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        };
                        match _serde::ser::SerializeTupleVariant::serialize_field(
                            &mut __serde_state,
                            __field0,
                        ) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        };
                        match _serde::ser::SerializeTupleVariant::serialize_field(
                            &mut __serde_state,
                            __field1,
                        ) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        };
                        _serde::ser::SerializeTupleVariant::end(__serde_state)
                    }
                    UpdateUserName::Contractor(ref __field0, ref __field1) => {
                        let mut __serde_state = match _serde::Serializer::serialize_tuple_variant(
                            __serializer,
                            "UpdateUserName",
                            1u32,
                            "Contractor",
                            0 + 1 + 1,
                        ) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        };
                        match _serde::ser::SerializeTupleVariant::serialize_field(
                            &mut __serde_state,
                            __field0,
                        ) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        };
                        match _serde::ser::SerializeTupleVariant::serialize_field(
                            &mut __serde_state,
                            __field1,
                        ) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        };
                        _serde::ser::SerializeTupleVariant::end(__serde_state)
                    }
                }
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for UpdateUserName {
            fn deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                enum __Field {
                    __field0,
                    __field1,
                }
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter, "variant identifier")
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Err(_serde::de::Error::invalid_value(
                                _serde::de::Unexpected::Unsigned(__value),
                                &"variant index 0 <= i < 2",
                            )),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Client" => _serde::__private::Ok(__Field::__field0),
                            "Contractor" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Err(_serde::de::Error::unknown_variant(
                                __value, VARIANTS,
                            )),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Client" => _serde::__private::Ok(__Field::__field0),
                            b"Contractor" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(_serde::de::Error::unknown_variant(
                                    __value, VARIANTS,
                                ))
                            }
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(__deserializer, __FieldVisitor)
                    }
                }
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<UpdateUserName>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = UpdateUserName;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter, "enum UpdateUserName")
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match match _serde::de::EnumAccess::variant(__data) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            (__Field::__field0, __variant) => {
                                struct __Visitor<'de> {
                                    marker: _serde::__private::PhantomData<UpdateUserName>,
                                    lifetime: _serde::__private::PhantomData<&'de ()>,
                                }
                                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                                    type Value = UpdateUserName;
                                    fn expecting(
                                        &self,
                                        __formatter: &mut _serde::__private::Formatter,
                                    ) -> _serde::__private::fmt::Result
                                    {
                                        _serde::__private::Formatter::write_str(
                                            __formatter,
                                            "tuple variant UpdateUserName::Client",
                                        )
                                    }
                                    #[inline]
                                    fn visit_seq<__A>(
                                        self,
                                        mut __seq: __A,
                                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                                    where
                                        __A: _serde::de::SeqAccess<'de>,
                                    {
                                        let __field0 =
                                            match match _serde::de::SeqAccess::next_element::<Uuid>(
                                                &mut __seq,
                                            ) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            } {
                                                _serde::__private::Some(__value) => __value,
                                                _serde::__private::None => {
                                                    return _serde :: __private :: Err (_serde :: de :: Error :: invalid_length (0usize , & "tuple variant UpdateUserName::Client with 2 elements")) ;
                                                }
                                            };
                                        let __field1 =
                                            match match _serde::de::SeqAccess::next_element::<String>(
                                                &mut __seq,
                                            ) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            } {
                                                _serde::__private::Some(__value) => __value,
                                                _serde::__private::None => {
                                                    return _serde :: __private :: Err (_serde :: de :: Error :: invalid_length (1usize , & "tuple variant UpdateUserName::Client with 2 elements")) ;
                                                }
                                            };
                                        _serde::__private::Ok(UpdateUserName::Client(
                                            __field0, __field1,
                                        ))
                                    }
                                }
                                _serde::de::VariantAccess::tuple_variant(
                                    __variant,
                                    2usize,
                                    __Visitor {
                                        marker: _serde::__private::PhantomData::<UpdateUserName>,
                                        lifetime: _serde::__private::PhantomData,
                                    },
                                )
                            }
                            (__Field::__field1, __variant) => {
                                struct __Visitor<'de> {
                                    marker: _serde::__private::PhantomData<UpdateUserName>,
                                    lifetime: _serde::__private::PhantomData<&'de ()>,
                                }
                                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                                    type Value = UpdateUserName;
                                    fn expecting(
                                        &self,
                                        __formatter: &mut _serde::__private::Formatter,
                                    ) -> _serde::__private::fmt::Result
                                    {
                                        _serde::__private::Formatter::write_str(
                                            __formatter,
                                            "tuple variant UpdateUserName::Contractor",
                                        )
                                    }
                                    #[inline]
                                    fn visit_seq<__A>(
                                        self,
                                        mut __seq: __A,
                                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                                    where
                                        __A: _serde::de::SeqAccess<'de>,
                                    {
                                        let __field0 =
                                            match match _serde::de::SeqAccess::next_element::<Uuid>(
                                                &mut __seq,
                                            ) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            } {
                                                _serde::__private::Some(__value) => __value,
                                                _serde::__private::None => {
                                                    return _serde :: __private :: Err (_serde :: de :: Error :: invalid_length (0usize , & "tuple variant UpdateUserName::Contractor with 2 elements")) ;
                                                }
                                            };
                                        let __field1 =
                                            match match _serde::de::SeqAccess::next_element::<String>(
                                                &mut __seq,
                                            ) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            } {
                                                _serde::__private::Some(__value) => __value,
                                                _serde::__private::None => {
                                                    return _serde :: __private :: Err (_serde :: de :: Error :: invalid_length (1usize , & "tuple variant UpdateUserName::Contractor with 2 elements")) ;
                                                }
                                            };
                                        _serde::__private::Ok(UpdateUserName::Contractor(
                                            __field0, __field1,
                                        ))
                                    }
                                }
                                _serde::de::VariantAccess::tuple_variant(
                                    __variant,
                                    2usize,
                                    __Visitor {
                                        marker: _serde::__private::PhantomData::<UpdateUserName>,
                                        lifetime: _serde::__private::PhantomData,
                                    },
                                )
                            }
                        }
                    }
                }
                const VARIANTS: &'static [&'static str] = &["Client", "Contractor"];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "UpdateUserName",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<UpdateUserName>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    impl PubSubData for UpdateUserName {
        fn as_topic_id() -> TopicId {
            TopicId::UpdateUserName
        }
    }
    pub struct CreateOrUpdateContracts {
        pub ulid: Uuid,
        pub client_ulid: Uuid,
        pub branch_ulid: Uuid,
        pub contractor_ulid: Uuid,
        pub contract_name: String,
        pub contract_type: String,
        pub contract_status: String,
        pub contract_amount: sqlx::types::Decimal,
        pub currency: Currency,
        pub job_title: String,
        pub seniority: String,
        #[serde_as(as = "TryFromInto<DateWrapper>")]
        #[serde(with = ":: serde_with :: As :: < TryFromInto < DateWrapper > >")]
        pub begin_at: sqlx::types::time::Date,
        #[serde_as(as = "TryFromInto<DateWrapper>")]
        #[serde(with = ":: serde_with :: As :: < TryFromInto < DateWrapper > >")]
        pub end_at: sqlx::types::time::Date,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for CreateOrUpdateContracts {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                CreateOrUpdateContracts {
                    ulid: ref __self_0_0,
                    client_ulid: ref __self_0_1,
                    branch_ulid: ref __self_0_2,
                    contractor_ulid: ref __self_0_3,
                    contract_name: ref __self_0_4,
                    contract_type: ref __self_0_5,
                    contract_status: ref __self_0_6,
                    contract_amount: ref __self_0_7,
                    currency: ref __self_0_8,
                    job_title: ref __self_0_9,
                    seniority: ref __self_0_10,
                    begin_at: ref __self_0_11,
                    end_at: ref __self_0_12,
                } => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_struct(f, "CreateOrUpdateContracts");
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "ulid",
                        &&(*__self_0_0),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "client_ulid",
                        &&(*__self_0_1),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "branch_ulid",
                        &&(*__self_0_2),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "contractor_ulid",
                        &&(*__self_0_3),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "contract_name",
                        &&(*__self_0_4),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "contract_type",
                        &&(*__self_0_5),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "contract_status",
                        &&(*__self_0_6),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "contract_amount",
                        &&(*__self_0_7),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "currency",
                        &&(*__self_0_8),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "job_title",
                        &&(*__self_0_9),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "seniority",
                        &&(*__self_0_10),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "begin_at",
                        &&(*__self_0_11),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "end_at",
                        &&(*__self_0_12),
                    );
                    ::core::fmt::DebugStruct::finish(debug_trait_builder)
                }
            }
        }
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for CreateOrUpdateContracts {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "CreateOrUpdateContracts",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "ulid",
                    &self.ulid,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "client_ulid",
                    &self.client_ulid,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "branch_ulid",
                    &self.branch_ulid,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "contractor_ulid",
                    &self.contractor_ulid,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "contract_name",
                    &self.contract_name,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "contract_type",
                    &self.contract_type,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "contract_status",
                    &self.contract_status,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "contract_amount",
                    &self.contract_amount,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "currency",
                    &self.currency,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "job_title",
                    &self.job_title,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "seniority",
                    &self.seniority,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "begin_at",
                    {
                        struct __SerializeWith<'__a> {
                            values: (&'__a sqlx::types::time::Date,),
                            phantom: _serde::__private::PhantomData<CreateOrUpdateContracts>,
                        }
                        impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                            fn serialize<__S>(
                                &self,
                                __s: __S,
                            ) -> _serde::__private::Result<__S::Ok, __S::Error>
                            where
                                __S: _serde::Serializer,
                            {
                                ::serde_with::As::<TryFromInto<DateWrapper>>::serialize(
                                    self.values.0,
                                    __s,
                                )
                            }
                        }
                        &__SerializeWith {
                            values: (&self.begin_at,),
                            phantom: _serde::__private::PhantomData::<CreateOrUpdateContracts>,
                        }
                    },
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state, "end_at", {
                    struct __SerializeWith<'__a> {
                        values: (&'__a sqlx::types::time::Date,),
                        phantom: _serde::__private::PhantomData<CreateOrUpdateContracts>,
                    }
                    impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                        fn serialize<__S>(
                            &self,
                            __s: __S,
                        ) -> _serde::__private::Result<__S::Ok, __S::Error>
                        where
                            __S: _serde::Serializer,
                        {
                            ::serde_with::As::<TryFromInto<DateWrapper>>::serialize(
                                self.values.0,
                                __s,
                            )
                        }
                    }
                    &__SerializeWith {
                        values: (&self.end_at,),
                        phantom: _serde::__private::PhantomData::<CreateOrUpdateContracts>,
                    }
                }) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for CreateOrUpdateContracts {
            fn deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                    __ignore,
                }
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter, "field identifier")
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "ulid" => _serde::__private::Ok(__Field::__field0),
                            "client_ulid" => _serde::__private::Ok(__Field::__field1),
                            "branch_ulid" => _serde::__private::Ok(__Field::__field2),
                            "contractor_ulid" => _serde::__private::Ok(__Field::__field3),
                            "contract_name" => _serde::__private::Ok(__Field::__field4),
                            "contract_type" => _serde::__private::Ok(__Field::__field5),
                            "contract_status" => _serde::__private::Ok(__Field::__field6),
                            "contract_amount" => _serde::__private::Ok(__Field::__field7),
                            "currency" => _serde::__private::Ok(__Field::__field8),
                            "job_title" => _serde::__private::Ok(__Field::__field9),
                            "seniority" => _serde::__private::Ok(__Field::__field10),
                            "begin_at" => _serde::__private::Ok(__Field::__field11),
                            "end_at" => _serde::__private::Ok(__Field::__field12),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"ulid" => _serde::__private::Ok(__Field::__field0),
                            b"client_ulid" => _serde::__private::Ok(__Field::__field1),
                            b"branch_ulid" => _serde::__private::Ok(__Field::__field2),
                            b"contractor_ulid" => _serde::__private::Ok(__Field::__field3),
                            b"contract_name" => _serde::__private::Ok(__Field::__field4),
                            b"contract_type" => _serde::__private::Ok(__Field::__field5),
                            b"contract_status" => _serde::__private::Ok(__Field::__field6),
                            b"contract_amount" => _serde::__private::Ok(__Field::__field7),
                            b"currency" => _serde::__private::Ok(__Field::__field8),
                            b"job_title" => _serde::__private::Ok(__Field::__field9),
                            b"seniority" => _serde::__private::Ok(__Field::__field10),
                            b"begin_at" => _serde::__private::Ok(__Field::__field11),
                            b"end_at" => _serde::__private::Ok(__Field::__field12),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(__deserializer, __FieldVisitor)
                    }
                }
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<CreateOrUpdateContracts>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = CreateOrUpdateContracts;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct CreateOrUpdateContracts",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 =
                            match match _serde::de::SeqAccess::next_element::<Uuid>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct CreateOrUpdateContracts with 13 elements",
                                        ),
                                    );
                                }
                            };
                        let __field1 =
                            match match _serde::de::SeqAccess::next_element::<Uuid>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct CreateOrUpdateContracts with 13 elements",
                                        ),
                                    );
                                }
                            };
                        let __field2 =
                            match match _serde::de::SeqAccess::next_element::<Uuid>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct CreateOrUpdateContracts with 13 elements",
                                        ),
                                    );
                                }
                            };
                        let __field3 =
                            match match _serde::de::SeqAccess::next_element::<Uuid>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct CreateOrUpdateContracts with 13 elements",
                                        ),
                                    );
                                }
                            };
                        let __field4 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct CreateOrUpdateContracts with 13 elements",
                                        ),
                                    );
                                }
                            };
                        let __field5 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct CreateOrUpdateContracts with 13 elements",
                                        ),
                                    );
                                }
                            };
                        let __field6 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            6usize,
                                            &"struct CreateOrUpdateContracts with 13 elements",
                                        ),
                                    );
                                }
                            };
                        let __field7 = match match _serde::de::SeqAccess::next_element::<
                            sqlx::types::Decimal,
                        >(&mut __seq)
                        {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(_serde::de::Error::invalid_length(
                                    7usize,
                                    &"struct CreateOrUpdateContracts with 13 elements",
                                ));
                            }
                        };
                        let __field8 =
                            match match _serde::de::SeqAccess::next_element::<Currency>(&mut __seq)
                            {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            8usize,
                                            &"struct CreateOrUpdateContracts with 13 elements",
                                        ),
                                    );
                                }
                            };
                        let __field9 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            9usize,
                                            &"struct CreateOrUpdateContracts with 13 elements",
                                        ),
                                    );
                                }
                            };
                        let __field10 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            10usize,
                                            &"struct CreateOrUpdateContracts with 13 elements",
                                        ),
                                    );
                                }
                            };
                        let __field11 = match {
                            struct __DeserializeWith<'de> {
                                value: sqlx::types::time::Date,
                                phantom: _serde::__private::PhantomData<CreateOrUpdateContracts>,
                                lifetime: _serde::__private::PhantomData<&'de ()>,
                            }
                            impl<'de> _serde::Deserialize<'de> for __DeserializeWith<'de> {
                                fn deserialize<__D>(
                                    __deserializer: __D,
                                ) -> _serde::__private::Result<Self, __D::Error>
                                where
                                    __D: _serde::Deserializer<'de>,
                                {
                                    _serde :: __private :: Ok (__DeserializeWith { value : match :: serde_with :: As :: < TryFromInto < DateWrapper > > :: deserialize (__deserializer) { _serde :: __private :: Ok (__val) => __val , _serde :: __private :: Err (__err) => { return _serde :: __private :: Err (__err) ; } } , phantom : _serde :: __private :: PhantomData , lifetime : _serde :: __private :: PhantomData , })
                                }
                            }
                            _serde::__private::Option::map(
                                match _serde::de::SeqAccess::next_element::<__DeserializeWith<'de>>(
                                    &mut __seq,
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                },
                                |__wrap| __wrap.value,
                            )
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(_serde::de::Error::invalid_length(
                                    11usize,
                                    &"struct CreateOrUpdateContracts with 13 elements",
                                ));
                            }
                        };
                        let __field12 = match {
                            struct __DeserializeWith<'de> {
                                value: sqlx::types::time::Date,
                                phantom: _serde::__private::PhantomData<CreateOrUpdateContracts>,
                                lifetime: _serde::__private::PhantomData<&'de ()>,
                            }
                            impl<'de> _serde::Deserialize<'de> for __DeserializeWith<'de> {
                                fn deserialize<__D>(
                                    __deserializer: __D,
                                ) -> _serde::__private::Result<Self, __D::Error>
                                where
                                    __D: _serde::Deserializer<'de>,
                                {
                                    _serde :: __private :: Ok (__DeserializeWith { value : match :: serde_with :: As :: < TryFromInto < DateWrapper > > :: deserialize (__deserializer) { _serde :: __private :: Ok (__val) => __val , _serde :: __private :: Err (__err) => { return _serde :: __private :: Err (__err) ; } } , phantom : _serde :: __private :: PhantomData , lifetime : _serde :: __private :: PhantomData , })
                                }
                            }
                            _serde::__private::Option::map(
                                match _serde::de::SeqAccess::next_element::<__DeserializeWith<'de>>(
                                    &mut __seq,
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                },
                                |__wrap| __wrap.value,
                            )
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(_serde::de::Error::invalid_length(
                                    12usize,
                                    &"struct CreateOrUpdateContracts with 13 elements",
                                ));
                            }
                        };
                        _serde::__private::Ok(CreateOrUpdateContracts {
                            ulid: __field0,
                            client_ulid: __field1,
                            branch_ulid: __field2,
                            contractor_ulid: __field3,
                            contract_name: __field4,
                            contract_type: __field5,
                            contract_status: __field6,
                            contract_amount: __field7,
                            currency: __field8,
                            job_title: __field9,
                            seniority: __field10,
                            begin_at: __field11,
                            end_at: __field12,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<Uuid> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<Uuid> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<Uuid> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<Uuid> = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<String> =
                            _serde::__private::None;
                        let mut __field5: _serde::__private::Option<String> =
                            _serde::__private::None;
                        let mut __field6: _serde::__private::Option<String> =
                            _serde::__private::None;
                        let mut __field7: _serde::__private::Option<sqlx::types::Decimal> =
                            _serde::__private::None;
                        let mut __field8: _serde::__private::Option<Currency> =
                            _serde::__private::None;
                        let mut __field9: _serde::__private::Option<String> =
                            _serde::__private::None;
                        let mut __field10: _serde::__private::Option<String> =
                            _serde::__private::None;
                        let mut __field11: _serde::__private::Option<sqlx::types::time::Date> =
                            _serde::__private::None;
                        let mut __field12: _serde::__private::Option<sqlx::types::time::Date> =
                            _serde::__private::None;
                        while let _serde::__private::Some(__key) =
                            match _serde::de::MapAccess::next_key::<__Field>(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            }
                        {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "ulid",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<Uuid>(&mut __map)
                                        {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "client_ulid",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<Uuid>(&mut __map)
                                        {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "branch_ulid",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<Uuid>(&mut __map)
                                        {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "contractor_ulid",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<Uuid>(&mut __map)
                                        {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "contract_name",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "contract_type",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "contract_status",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "contract_amount",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            sqlx::types::Decimal,
                                        >(&mut __map)
                                        {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "currency",
                                            ),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<Currency>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "job_title",
                                            ),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field10 => {
                                    if _serde::__private::Option::is_some(&__field10) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "seniority",
                                            ),
                                        );
                                    }
                                    __field10 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field11 => {
                                    if _serde::__private::Option::is_some(&__field11) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "begin_at",
                                            ),
                                        );
                                    }
                                    __field11 = _serde::__private::Some({
                                        struct __DeserializeWith<'de> {
                                            value: sqlx::types::time::Date,
                                            phantom: _serde::__private::PhantomData<
                                                CreateOrUpdateContracts,
                                            >,
                                            lifetime: _serde::__private::PhantomData<&'de ()>,
                                        }
                                        impl<'de> _serde::Deserialize<'de> for __DeserializeWith<'de> {
                                            fn deserialize<__D>(
                                                __deserializer: __D,
                                            ) -> _serde::__private::Result<Self, __D::Error>
                                            where
                                                __D: _serde::Deserializer<'de>,
                                            {
                                                _serde::__private::Ok(__DeserializeWith {
                                                    value: match ::serde_with::As::<
                                                        TryFromInto<DateWrapper>,
                                                    >::deserialize(
                                                        __deserializer
                                                    ) {
                                                        _serde::__private::Ok(__val) => __val,
                                                        _serde::__private::Err(__err) => {
                                                            return _serde::__private::Err(__err);
                                                        }
                                                    },
                                                    phantom: _serde::__private::PhantomData,
                                                    lifetime: _serde::__private::PhantomData,
                                                })
                                            }
                                        }
                                        match _serde::de::MapAccess::next_value::<
                                            __DeserializeWith<'de>,
                                        >(&mut __map)
                                        {
                                            _serde::__private::Ok(__wrapper) => __wrapper.value,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        }
                                    });
                                }
                                __Field::__field12 => {
                                    if _serde::__private::Option::is_some(&__field12) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "end_at",
                                            ),
                                        );
                                    }
                                    __field12 = _serde::__private::Some({
                                        struct __DeserializeWith<'de> {
                                            value: sqlx::types::time::Date,
                                            phantom: _serde::__private::PhantomData<
                                                CreateOrUpdateContracts,
                                            >,
                                            lifetime: _serde::__private::PhantomData<&'de ()>,
                                        }
                                        impl<'de> _serde::Deserialize<'de> for __DeserializeWith<'de> {
                                            fn deserialize<__D>(
                                                __deserializer: __D,
                                            ) -> _serde::__private::Result<Self, __D::Error>
                                            where
                                                __D: _serde::Deserializer<'de>,
                                            {
                                                _serde::__private::Ok(__DeserializeWith {
                                                    value: match ::serde_with::As::<
                                                        TryFromInto<DateWrapper>,
                                                    >::deserialize(
                                                        __deserializer
                                                    ) {
                                                        _serde::__private::Ok(__val) => __val,
                                                        _serde::__private::Err(__err) => {
                                                            return _serde::__private::Err(__err);
                                                        }
                                                    },
                                                    phantom: _serde::__private::PhantomData,
                                                    lifetime: _serde::__private::PhantomData,
                                                })
                                            }
                                        }
                                        match _serde::de::MapAccess::next_value::<
                                            __DeserializeWith<'de>,
                                        >(&mut __map)
                                        {
                                            _serde::__private::Ok(__wrapper) => __wrapper.value,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        }
                                    });
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)
                                    {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("ulid") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("client_ulid") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("branch_ulid") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("contractor_ulid") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("contract_name") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("contract_type") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("contract_status") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("contract_amount") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("currency") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("job_title") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field10 = match __field10 {
                            _serde::__private::Some(__field10) => __field10,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("seniority") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field11 = match __field11 {
                            _serde::__private::Some(__field11) => __field11,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    <__A::Error as _serde::de::Error>::missing_field("begin_at"),
                                )
                            }
                        };
                        let __field12 = match __field12 {
                            _serde::__private::Some(__field12) => __field12,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    <__A::Error as _serde::de::Error>::missing_field("end_at"),
                                )
                            }
                        };
                        _serde::__private::Ok(CreateOrUpdateContracts {
                            ulid: __field0,
                            client_ulid: __field1,
                            branch_ulid: __field2,
                            contractor_ulid: __field3,
                            contract_name: __field4,
                            contract_type: __field5,
                            contract_status: __field6,
                            contract_amount: __field7,
                            currency: __field8,
                            job_title: __field9,
                            seniority: __field10,
                            begin_at: __field11,
                            end_at: __field12,
                        })
                    }
                }
                const FIELDS: &'static [&'static str] = &[
                    "ulid",
                    "client_ulid",
                    "branch_ulid",
                    "contractor_ulid",
                    "contract_name",
                    "contract_type",
                    "contract_status",
                    "contract_amount",
                    "currency",
                    "job_title",
                    "seniority",
                    "begin_at",
                    "end_at",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "CreateOrUpdateContracts",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<CreateOrUpdateContracts>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    impl PubSubData for CreateOrUpdateContracts {
        fn as_topic_id() -> TopicId {
            TopicId::CreateOrUpdateContracts
        }
    }
    pub trait PubSubData {
        fn create_topic_subscription<S>(route: S) -> TopicSubscription
        where
            S: Into<String>,
        {
            TopicSubscription {
                pubsub_name: GLOBELISE_PUBSUB_TOPIC_ID,
                topic: Self::as_topic_id().as_str().to_string(),
                route: route.into(),
                metadata: HashMap::default(),
            }
        }
        fn as_topic_id() -> TopicId;
    }
}
pub mod token {
    //! Functions and types for handling authorization tokens.
    use std::{collections::HashMap, sync::Arc};
    use axum::{
        async_trait,
        extract::{Extension, FromRequest, Query, RequestParts, TypedHeader},
        headers::{authorization::Bearer, Authorization},
    };
    use http_cache_reqwest::{Cache, CacheMode, HttpCache, MokaManager};
    use jsonwebtoken::{
        decode, encode, Algorithm, DecodingKey, EncodingKey, Header, TokenData, Validation,
    };
    use once_cell::sync::Lazy;
    use reqwest::{
        header::{HeaderMap, HeaderValue},
        Client as ReqwestClient,
    };
    use reqwest_middleware::{ClientBuilder, ClientWithMiddleware};
    use serde::{de::DeserializeOwned, Deserialize, Serialize};
    use time::{Duration, OffsetDateTime};
    use tokio::sync::Mutex;
    use crate::{
        error::{GlobeliseError, GlobeliseResult},
        DaprAppId,
    };
    /// The issuer of tokens, used in the `iss` field of JWTs.
    pub const ISSUER: &str = "https://globelise.com";
    /// Stores the keys used for encoding and decoding tokens.
    pub struct Keys {
        pub encoding: EncodingKey,
        pub decoding: DecodingKey,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::clone::Clone for Keys {
        #[inline]
        fn clone(&self) -> Keys {
            match *self {
                Keys {
                    encoding: ref __self_0_0,
                    decoding: ref __self_0_1,
                } => Keys {
                    encoding: ::core::clone::Clone::clone(&(*__self_0_0)),
                    decoding: ::core::clone::Clone::clone(&(*__self_0_1)),
                },
            }
        }
    }
    impl Keys {
        /// Creates a new encoding/decoding key pair from an RSA key pair.
        ///
        /// The private key must be in PEM form, and the public key in JWK form.
        pub fn new(private_key: &[u8], public_key: &[u8]) -> Self {
            Self {
                encoding: EncodingKey::from_ed_pem(private_key)
                    .expect("Could not create encoding key"),
                decoding: DecodingKey::from_ed_pem(public_key)
                    .expect("Could not create decoding key"),
            }
        }
    }
    /// Creates an access token.
    pub fn create_token<P>(
        payload: P,
        encoding: &EncodingKey,
    ) -> Result<(String, i64), GlobeliseError>
    where
        P: std::fmt::Debug + Serialize + DeserializeOwned + TokenLike,
    {
        let claims = Token::new(payload)?;
        let token = encode(&Header::new(Algorithm::EdDSA), &claims, encoding)
            .map_err(GlobeliseError::internal)?;
        Ok((token, claims.exp))
    }
    pub trait TokenLike {
        fn aud() -> &'static str;
        fn exp() -> Duration;
        fn dapr_app_id() -> DaprAppId;
    }
    /// Claims for access tokens.
    #[serde(rename_all = "kebab-case")]
    pub struct Token<P>
    where
        P: TokenLike,
    {
        pub payload: P,
        aud: String,
        iss: String,
        exp: i64,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl<P: ::core::fmt::Debug> ::core::fmt::Debug for Token<P>
    where
        P: TokenLike,
    {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                Token {
                    payload: ref __self_0_0,
                    aud: ref __self_0_1,
                    iss: ref __self_0_2,
                    exp: ref __self_0_3,
                } => {
                    let debug_trait_builder = &mut ::core::fmt::Formatter::debug_struct(f, "Token");
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "payload",
                        &&(*__self_0_0),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "aud",
                        &&(*__self_0_1),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "iss",
                        &&(*__self_0_2),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "exp",
                        &&(*__self_0_3),
                    );
                    ::core::fmt::DebugStruct::finish(debug_trait_builder)
                }
            }
        }
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de, P> _serde::Deserialize<'de> for Token<P>
        where
            P: TokenLike,
            P: _serde::Deserialize<'de>,
        {
            fn deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __ignore,
                }
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter, "field identifier")
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "payload" => _serde::__private::Ok(__Field::__field0),
                            "aud" => _serde::__private::Ok(__Field::__field1),
                            "iss" => _serde::__private::Ok(__Field::__field2),
                            "exp" => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"payload" => _serde::__private::Ok(__Field::__field0),
                            b"aud" => _serde::__private::Ok(__Field::__field1),
                            b"iss" => _serde::__private::Ok(__Field::__field2),
                            b"exp" => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(__deserializer, __FieldVisitor)
                    }
                }
                struct __Visitor<'de, P>
                where
                    P: TokenLike,
                    P: _serde::Deserialize<'de>,
                {
                    marker: _serde::__private::PhantomData<Token<P>>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de, P> _serde::de::Visitor<'de> for __Visitor<'de, P>
                where
                    P: TokenLike,
                    P: _serde::Deserialize<'de>,
                {
                    type Value = Token<P>;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter, "struct Token")
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 =
                            match match _serde::de::SeqAccess::next_element::<P>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct Token with 4 elements",
                                        ),
                                    );
                                }
                            };
                        let __field1 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct Token with 4 elements",
                                        ),
                                    );
                                }
                            };
                        let __field2 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct Token with 4 elements",
                                        ),
                                    );
                                }
                            };
                        let __field3 =
                            match match _serde::de::SeqAccess::next_element::<i64>(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct Token with 4 elements",
                                        ),
                                    );
                                }
                            };
                        _serde::__private::Ok(Token {
                            payload: __field0,
                            aud: __field1,
                            iss: __field2,
                            exp: __field3,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<P> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<String> =
                            _serde::__private::None;
                        let mut __field2: _serde::__private::Option<String> =
                            _serde::__private::None;
                        let mut __field3: _serde::__private::Option<i64> = _serde::__private::None;
                        while let _serde::__private::Some(__key) =
                            match _serde::de::MapAccess::next_key::<__Field>(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            }
                        {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "payload",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<P>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "aud",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "iss",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<String>(
                                            &mut __map,
                                        ) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "exp",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<i64>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)
                                    {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("payload") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("aud") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("iss") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("exp") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(Token {
                            payload: __field0,
                            aud: __field1,
                            iss: __field2,
                            exp: __field3,
                        })
                    }
                }
                const FIELDS: &'static [&'static str] = &["payload", "aud", "iss", "exp"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Token",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Token<P>>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<P> _serde::Serialize for Token<P>
        where
            P: TokenLike,
            P: _serde::Serialize,
        {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "Token",
                    false as usize + 1 + 1 + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "payload",
                    &self.payload,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "aud",
                    &self.aud,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "iss",
                    &self.iss,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "exp",
                    &self.exp,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    impl<P> Token<P>
    where
        P: TokenLike,
    {
        pub fn new(payload: P) -> GlobeliseResult<Self> {
            let exp = OffsetDateTime::now_utc()
                .unix_timestamp()
                .checked_add(P::exp().whole_seconds())
                .ok_or_else(|| {
                    GlobeliseError::Internal(
                        "Could not calculate access token expiration timestamp".into(),
                    )
                })?;
            Ok(Token {
                payload,
                aud: P::aud().to_string(),
                iss: ISSUER.to_string(),
                exp,
            })
        }
        async fn decode<'e>(input: &'e str, decoding: &DecodingKey) -> Result<Self, GlobeliseError>
        where
            P: DeserializeOwned,
        {
            let validation = {
                let mut validation = Validation::new(Algorithm::EdDSA);
                validation.set_audience(&[P::aud()]);
                validation.set_issuer(&[ISSUER]);
                validation.set_required_spec_claims(&["aud", "iss", "exp"]);
                validation
            };
            let TokenData { claims, .. } = decode::<Token<P>>(input, decoding, &validation)
                .map_err(|e| GlobeliseError::unauthorized(e.to_string()))?;
            Ok(claims)
        }
    }
    impl<P, B> FromRequest<B> for Token<P>
    where
        B: Send,
        P: std::fmt::Debug + Serialize + DeserializeOwned + TokenLike,
    {
        type Rejection = GlobeliseError;
        #[allow(
            clippy::let_unit_value,
            clippy::no_effect_underscore_binding,
            clippy::shadow_same,
            clippy::type_complexity,
            clippy::type_repetition_in_bounds,
            clippy::used_underscore_binding
        )]
        fn from_request<'life0, 'async_trait>(
            req: &'life0 mut RequestParts<B>,
        ) -> ::core::pin::Pin<
            Box<
                dyn ::core::future::Future<Output = Result<Self, Self::Rejection>>
                    + ::core::marker::Send
                    + 'async_trait,
            >,
        >
        where
            'life0: 'async_trait,
            Self: 'async_trait,
        {
            Box::pin(async move {
                if let ::core::option::Option::Some(__ret) =
                    ::core::option::Option::None::<Result<Self, Self::Rejection>>
                {
                    return __ret;
                }
                let req = req;
                let __ret: Result<Self, Self::Rejection> = {
                    let Extension(public_keys) =
                        Extension::<SharedPublicKeys>::from_request(req).await?;
                    let mut public_keys = public_keys.lock().await;
                    let decoding_key = public_keys.get(P::dapr_app_id()).await?;
                    if let Ok(TypedHeader(Authorization(bearer))) =
                        TypedHeader::<Authorization<Bearer>>::from_request(req).await
                    {
                        Ok(Token::decode(bearer.token(), decoding_key).await?)
                    } else if let Ok(Query(param)) =
                        Query::<HashMap<String, String>>::from_request(req).await
                    {
                        let token = param.get("token").ok_or_else(|| {
                            GlobeliseError::unauthorized(
                                "Please provide access token in the query param or as auth bearer",
                            )
                        })?;
                        Ok(Token::decode(token.as_str(), decoding_key).await?)
                    } else {
                        Err(GlobeliseError::unauthorized(
                            "Please provide access token in the query param or as auth bearer",
                        ))
                    }
                };
                #[allow(unreachable_code)]
                __ret
            })
        }
    }
    pub struct TokenString(pub String);
    impl<B> FromRequest<B> for TokenString
    where
        B: Send,
    {
        type Rejection = GlobeliseError;
        #[allow(
            clippy::let_unit_value,
            clippy::no_effect_underscore_binding,
            clippy::shadow_same,
            clippy::type_complexity,
            clippy::type_repetition_in_bounds,
            clippy::used_underscore_binding
        )]
        fn from_request<'life0, 'async_trait>(
            req: &'life0 mut RequestParts<B>,
        ) -> ::core::pin::Pin<
            Box<
                dyn ::core::future::Future<Output = Result<Self, Self::Rejection>>
                    + ::core::marker::Send
                    + 'async_trait,
            >,
        >
        where
            'life0: 'async_trait,
            Self: 'async_trait,
        {
            Box::pin(async move {
                if let ::core::option::Option::Some(__ret) =
                    ::core::option::Option::None::<Result<Self, Self::Rejection>>
                {
                    return __ret;
                }
                let req = req;
                let __ret: Result<Self, Self::Rejection> = {
                    if let Ok(TypedHeader(Authorization(bearer))) =
                        TypedHeader::<Authorization<Bearer>>::from_request(req).await
                    {
                        Ok(TokenString(bearer.token().to_string()))
                    } else if let Ok(Query(param)) =
                        Query::<HashMap<String, String>>::from_request(req).await
                    {
                        let token = param.get("token").ok_or_else(|| {
                            GlobeliseError::unauthorized(
                                "Please provide access token in the query param or as auth bearer",
                            )
                        })?;
                        Ok(TokenString(token.to_string()))
                    } else {
                        Err(GlobeliseError::unauthorized(
                            "No valid access token provided",
                        ))
                    }
                };
                #[allow(unreachable_code)]
                __ret
            })
        }
    }
    /// HTTP client for public keys
    static HTTP_CLIENT: Lazy<ClientWithMiddleware> = Lazy::new(|| {
        ClientBuilder::new(ReqwestClient::new())
            .with(Cache(HttpCache {
                mode: CacheMode::Default,
                manager: Arc::new(MokaManager::default()),
                options: None,
            }))
            .build()
    });
    pub struct PublicKeys(std::collections::HashMap<DaprAppId, DecodingKey>);
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::default::Default for PublicKeys {
        #[inline]
        fn default() -> PublicKeys {
            PublicKeys(::core::default::Default::default())
        }
    }
    pub type SharedPublicKeys = Arc<Mutex<PublicKeys>>;
    impl PublicKeys {
        pub async fn get(&mut self, key: DaprAppId) -> GlobeliseResult<&DecodingKey> {
            let m_value = self.0.get(&key);
            if m_value.is_none() {
                let public_key_str = HTTP_CLIENT
                    .get(&{
                        let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                            &["", "/auth/public-key"],
                            &[::core::fmt::ArgumentV1::new_display(
                                &key.microservice_domain_url()?,
                            )],
                        ));
                        res
                    })
                    .headers({
                        let mut headers = HeaderMap::default();
                        headers.insert("dapr-app-id", HeaderValue::from_static(key.as_str()));
                        headers
                    })
                    .send()
                    .await?
                    .text()
                    .await?;
                let decoding_key = DecodingKey::from_ed_pem(public_key_str.as_bytes())?;
                self.0.insert(key, decoding_key);
            }
            Ok(self.0.get(&key).unwrap())
        }
    }
}
#[serde(rename_all = "kebab-case")]
#[strum(serialize_all = "kebab-case")]
pub enum DaprAppId {
    UserManagementMicroservice,
    EorAdminMicroservice,
    ContractorManagementMicroservice,
}
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::fmt::Debug for DaprAppId {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match (&*self,) {
            (&DaprAppId::UserManagementMicroservice,) => {
                ::core::fmt::Formatter::write_str(f, "UserManagementMicroservice")
            }
            (&DaprAppId::EorAdminMicroservice,) => {
                ::core::fmt::Formatter::write_str(f, "EorAdminMicroservice")
            }
            (&DaprAppId::ContractorManagementMicroservice,) => {
                ::core::fmt::Formatter::write_str(f, "ContractorManagementMicroservice")
            }
        }
    }
}
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::clone::Clone for DaprAppId {
    #[inline]
    fn clone(&self) -> DaprAppId {
        {
            *self
        }
    }
}
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::marker::Copy for DaprAppId {}
impl ::core::marker::StructuralPartialEq for DaprAppId {}
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::cmp::PartialEq for DaprAppId {
    #[inline]
    fn eq(&self, other: &DaprAppId) -> bool {
        {
            let __self_vi = ::core::intrinsics::discriminant_value(&*self);
            let __arg_1_vi = ::core::intrinsics::discriminant_value(&*other);
            if true && __self_vi == __arg_1_vi {
                match (&*self, &*other) {
                    _ => true,
                }
            } else {
                false
            }
        }
    }
}
impl ::core::marker::StructuralEq for DaprAppId {}
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::cmp::Eq for DaprAppId {
    #[inline]
    #[doc(hidden)]
    #[no_coverage]
    fn assert_receiver_is_total_eq(&self) -> () {
        {}
    }
}
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::hash::Hash for DaprAppId {
    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
        match (&*self,) {
            _ => ::core::hash::Hash::hash(&::core::intrinsics::discriminant_value(self), state),
        }
    }
}
impl ::core::fmt::Display for DaprAppId {
    fn fmt(
        &self,
        f: &mut ::core::fmt::Formatter,
    ) -> ::core::result::Result<(), ::core::fmt::Error> {
        match *self {
            DaprAppId::UserManagementMicroservice => f.pad("user-management-microservice"),
            DaprAppId::EorAdminMicroservice => f.pad("eor-admin-microservice"),
            DaprAppId::ContractorManagementMicroservice => {
                f.pad("contractor-management-microservice")
            }
        }
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for DaprAppId {
        fn deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            enum __Field {
                __field0,
                __field1,
                __field2,
            }
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "variant identifier")
                }
                fn visit_u64<__E>(self, __value: u64) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        _ => _serde::__private::Err(_serde::de::Error::invalid_value(
                            _serde::de::Unexpected::Unsigned(__value),
                            &"variant index 0 <= i < 3",
                        )),
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "user-management-microservice" => _serde::__private::Ok(__Field::__field0),
                        "eor-admin-microservice" => _serde::__private::Ok(__Field::__field1),
                        "contractor-management-microservice" => {
                            _serde::__private::Ok(__Field::__field2)
                        }
                        _ => _serde::__private::Err(_serde::de::Error::unknown_variant(
                            __value, VARIANTS,
                        )),
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"user-management-microservice" => _serde::__private::Ok(__Field::__field0),
                        b"eor-admin-microservice" => _serde::__private::Ok(__Field::__field1),
                        b"contractor-management-microservice" => {
                            _serde::__private::Ok(__Field::__field2)
                        }
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(_serde::de::Error::unknown_variant(
                                __value, VARIANTS,
                            ))
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(__deserializer, __FieldVisitor)
                }
            }
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<DaprAppId>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = DaprAppId;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "enum DaprAppId")
                }
                fn visit_enum<__A>(
                    self,
                    __data: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::EnumAccess<'de>,
                {
                    match match _serde::de::EnumAccess::variant(__data) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    } {
                        (__Field::__field0, __variant) => {
                            match _serde::de::VariantAccess::unit_variant(__variant) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            };
                            _serde::__private::Ok(DaprAppId::UserManagementMicroservice)
                        }
                        (__Field::__field1, __variant) => {
                            match _serde::de::VariantAccess::unit_variant(__variant) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            };
                            _serde::__private::Ok(DaprAppId::EorAdminMicroservice)
                        }
                        (__Field::__field2, __variant) => {
                            match _serde::de::VariantAccess::unit_variant(__variant) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            };
                            _serde::__private::Ok(DaprAppId::ContractorManagementMicroservice)
                        }
                    }
                }
            }
            const VARIANTS: &'static [&'static str] = &[
                "user-management-microservice",
                "eor-admin-microservice",
                "contractor-management-microservice",
            ];
            _serde::Deserializer::deserialize_enum(
                __deserializer,
                "DaprAppId",
                VARIANTS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<DaprAppId>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for DaprAppId {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                DaprAppId::UserManagementMicroservice => {
                    _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "DaprAppId",
                        0u32,
                        "user-management-microservice",
                    )
                }
                DaprAppId::EorAdminMicroservice => _serde::Serializer::serialize_unit_variant(
                    __serializer,
                    "DaprAppId",
                    1u32,
                    "eor-admin-microservice",
                ),
                DaprAppId::ContractorManagementMicroservice => {
                    _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "DaprAppId",
                        2u32,
                        "contractor-management-microservice",
                    )
                }
            }
        }
    }
};
impl DaprAppId {
    pub fn as_str(&self) -> &'static str {
        match self {
            DaprAppId::UserManagementMicroservice => "user-management-microservice",
            DaprAppId::EorAdminMicroservice => "eor-admin-microservice",
            DaprAppId::ContractorManagementMicroservice => "contractor-management-microservice",
        }
    }
    pub fn microservice_domain_url(&self) -> GlobeliseResult<String> {
        Ok((match self {
            DaprAppId::UserManagementMicroservice => {
                std::env::var("USER_MANAGEMENT_MICROSERVICE_DOMAIN_URL")
            }
            DaprAppId::EorAdminMicroservice => std::env::var("EOR_ADMIN_MICROSERVICE_DOMAIN_URL"),
            DaprAppId::ContractorManagementMicroservice => {
                std::env::var("CONTRACTOR_MANAGEMENT_MICROSERVICE_DOMAIN_URL")
            }
        })?)
    }
}
pub fn calc_limit_and_offset(
    per_page: Option<u32>,
    page: Option<u32>,
) -> (Option<u32>, Option<u32>) {
    let limit = per_page;
    let offset = limit.and_then(|v| page.map(|w| (w - 1) * v));
    (limit, offset)
}
